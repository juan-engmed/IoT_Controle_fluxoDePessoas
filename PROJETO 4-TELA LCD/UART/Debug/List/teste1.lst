
AVRASM ver. 2.1.30  C:\Users\Filipe\Desktop\PROJETO 4\UART\Debug\List\teste1.asm Sat Mar 06 09:54:56 2021

C:\Users\Filipe\Desktop\PROJETO 4\UART\Debug\List\teste1.asm(1083): warning: Register r4 already defined by the .DEF directive
C:\Users\Filipe\Desktop\PROJETO 4\UART\Debug\List\teste1.asm(1084): warning: Register r5 already defined by the .DEF directive
C:\Users\Filipe\Desktop\PROJETO 4\UART\Debug\List\teste1.asm(1085): warning: Register r7 already defined by the .DEF directive
C:\Users\Filipe\Desktop\PROJETO 4\UART\Debug\List\teste1.asm(1086): warning: Register r6 already defined by the .DEF directive
C:\Users\Filipe\Desktop\PROJETO 4\UART\Debug\List\teste1.asm(1087): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.43 
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 14,745600 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _cont=R4
                 	.DEF _cont_msb=R5
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0076 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 754e
000034 656d
000035 6f72
000036 6420      	.DB  0x4E,0x75,0x6D,0x65,0x72,0x6F,0x20,0x64
000037 2065
000038 6570
000039 7373
00003a 616f      	.DB  0x65,0x20,0x70,0x65,0x73,0x73,0x6F,0x61
00003b 2073
00003c 6f6e
00003d 6920
00003e 746e      	.DB  0x73,0x20,0x6E,0x6F,0x20,0x69,0x6E,0x74
00003f 7265
000040 6f69
000041 3a72
000042 3d20      	.DB  0x65,0x72,0x69,0x6F,0x72,0x3A,0x20,0x3D
000043 2520
000044 2e64
000045 0a0d
000046 4100      	.DB  0x20,0x25,0x64,0x2E,0xD,0xA,0x0,0x41
000047 626d
000048 6569
000049 746e
00004a 2065      	.DB  0x6D,0x62,0x69,0x65,0x6E,0x74,0x65,0x20
00004b 6176
00004c 697a
00004d 206f
00004e 0a0d      	.DB  0x76,0x61,0x7A,0x69,0x6F,0x20,0xD,0xA
00004f 4100
000050 424d
000051 4549
000052 544e      	.DB  0x0,0x41,0x4D,0x42,0x49,0x45,0x4E,0x54
000053 2045
000054 4156
000055 495a
000056 004f      	.DB  0x45,0x20,0x56,0x41,0x5A,0x49,0x4F,0x0
000057 414d
000058 544e
000059 5245
00005a 4420      	.DB  0x4D,0x41,0x4E,0x54,0x45,0x52,0x20,0x44
00005b 5349
00005c 4154
00005d 434e
00005e 4149      	.DB  0x49,0x53,0x54,0x41,0x4E,0x43,0x49,0x41
00005f 4300
000060 5041
000061 4341
000062 4449      	.DB  0x0,0x43,0x41,0x50,0x41,0x43,0x49,0x44
000063 4441
000064 2045
000065 414d
000066 0058      	.DB  0x41,0x44,0x45,0x20,0x4D,0x41,0x58,0x0
000067 4146
000068 4f56
000069 2052
00006a 4552      	.DB  0x46,0x41,0x56,0x4F,0x52,0x20,0x52,0x45
00006b 4954
00006c 4152
00006d 2d52
00006e 4553      	.DB  0x54,0x49,0x52,0x41,0x52,0x2D,0x53,0x45
00006f 2500
000070 0064      	.DB  0x0,0x25,0x64,0x0
                 _0x2000003:
000071 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000072 0002      	.DW  0x02
000073 01a2      	.DW  __base_y_G100
000074 00e2      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000075 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000076 94f8      	CLI
000077 27ee      	CLR  R30
000078 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000079 e0f1      	LDI  R31,1
00007a bffb      	OUT  GICR,R31
00007b bfeb      	OUT  GICR,R30
00007c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00007d e08d      	LDI  R24,(14-2)+1
00007e e0a2      	LDI  R26,2
00007f 27bb      	CLR  R27
                 __CLEAR_REG:
000080 93ed      	ST   X+,R30
000081 958a      	DEC  R24
000082 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000083 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000084 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000085 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000086 93ed      	ST   X+,R30
000087 9701      	SBIW R24,1
000088 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000089 eee4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00008a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00008b 9185      	LPM  R24,Z+
00008c 9195      	LPM  R25,Z+
00008d 9700      	SBIW R24,0
00008e f061      	BREQ __GLOBAL_INI_END
00008f 91a5      	LPM  R26,Z+
000090 91b5      	LPM  R27,Z+
000091 9005      	LPM  R0,Z+
000092 9015      	LPM  R1,Z+
000093 01bf      	MOVW R22,R30
000094 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000095 9005      	LPM  R0,Z+
000096 920d      	ST   X+,R0
000097 9701      	SBIW R24,1
000098 f7e1      	BRNE __GLOBAL_INI_LOOP
000099 01fb      	MOVW R30,R22
00009a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00009b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00009c bfed      	OUT  SPL,R30
00009d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00009e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00009f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a0 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a1 940c 00a3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void main(void)
                 ; 0000 0027 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0028 // Declare your local variables here
                 ; 0000 0029 
                 ; 0000 002A cont = 0;
0000a3 2444      	CLR  R4
0000a4 2455      	CLR  R5
                 ; 0000 002B 
                 ; 0000 002C 
                 ; 0000 002D // Input/Output Ports initialization
                 ; 0000 002E // Port A initialization
                 ; 0000 002F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0030 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 bbea      	OUT  0x1A,R30
                 ; 0000 0031 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0032 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000a7 bbeb      	OUT  0x1B,R30
                 ; 0000 0033 
                 ; 0000 0034 // Port B initialization
                 ; 0000 0035 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0036 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000a8 bbe7      	OUT  0x17,R30
                 ; 0000 0037 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0038 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000a9 bbe8      	OUT  0x18,R30
                 ; 0000 0039 
                 ; 0000 003A // Port C initialization
                 ; 0000 003B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003C DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000aa bbe4      	OUT  0x14,R30
                 ; 0000 003D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003E PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000ab bbe5      	OUT  0x15,R30
                 ; 0000 003F 
                 ; 0000 0040 // Port D initialization
                 ; 0000 0041 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0042 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000ac bbe1      	OUT  0x11,R30
                 ; 0000 0043 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0044 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ad bbe2      	OUT  0x12,R30
                 ; 0000 0045 
                 ; 0000 0046 // Timer/Counter 0 initialization
                 ; 0000 0047 // Clock source: System Clock
                 ; 0000 0048 // Clock value: Timer 0 Stopped
                 ; 0000 0049 // Mode: Normal top=0xFF
                 ; 0000 004A // OC0 output: Disconnected
                 ; 0000 004B TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000ae bfe3      	OUT  0x33,R30
                 ; 0000 004C TCNT0=0x00;
0000af bfe2      	OUT  0x32,R30
                 ; 0000 004D OCR0=0x00;
0000b0 bfec      	OUT  0x3C,R30
                 ; 0000 004E 
                 ; 0000 004F // Timer/Counter 1 initialization
                 ; 0000 0050 // Clock source: System Clock
                 ; 0000 0051 // Clock value: Timer1 Stopped
                 ; 0000 0052 // Mode: Normal top=0xFFFF
                 ; 0000 0053 // OC1A output: Disconnected
                 ; 0000 0054 // OC1B output: Disconnected
                 ; 0000 0055 // Noise Canceler: Off
                 ; 0000 0056 // Input Capture on Falling Edge
                 ; 0000 0057 // Timer1 Overflow Interrupt: Off
                 ; 0000 0058 // Input Capture Interrupt: Off
                 ; 0000 0059 // Compare A Match Interrupt: Off
                 ; 0000 005A // Compare B Match Interrupt: Off
                 ; 0000 005B TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000b1 bdef      	OUT  0x2F,R30
                 ; 0000 005C TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000b2 bdee      	OUT  0x2E,R30
                 ; 0000 005D TCNT1H=0x00;
0000b3 bded      	OUT  0x2D,R30
                 ; 0000 005E TCNT1L=0x00;
0000b4 bdec      	OUT  0x2C,R30
                 ; 0000 005F ICR1H=0x00;
0000b5 bde7      	OUT  0x27,R30
                 ; 0000 0060 ICR1L=0x00;
0000b6 bde6      	OUT  0x26,R30
                 ; 0000 0061 OCR1AH=0x00;
0000b7 bdeb      	OUT  0x2B,R30
                 ; 0000 0062 OCR1AL=0x00;
0000b8 bdea      	OUT  0x2A,R30
                 ; 0000 0063 OCR1BH=0x00;
0000b9 bde9      	OUT  0x29,R30
                 ; 0000 0064 OCR1BL=0x00;
0000ba bde8      	OUT  0x28,R30
                 ; 0000 0065 
                 ; 0000 0066 // Timer/Counter 2 initialization
                 ; 0000 0067 // Clock source: System Clock
                 ; 0000 0068 // Clock value: Timer2 Stopped
                 ; 0000 0069 // Mode: Normal top=0xFF
                 ; 0000 006A // OC2 output: Disconnected
                 ; 0000 006B ASSR=0<<AS2;
0000bb bde2      	OUT  0x22,R30
                 ; 0000 006C TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000bc bde5      	OUT  0x25,R30
                 ; 0000 006D TCNT2=0x00;
0000bd bde4      	OUT  0x24,R30
                 ; 0000 006E OCR2=0x00;
0000be bde3      	OUT  0x23,R30
                 ; 0000 006F 
                 ; 0000 0070 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0071 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000bf bfe9      	OUT  0x39,R30
                 ; 0000 0072 
                 ; 0000 0073 // External Interrupt(s) initialization
                 ; 0000 0074 // INT0: Off
                 ; 0000 0075 // INT1: Off
                 ; 0000 0076 // INT2: Off
                 ; 0000 0077 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000c0 bfe5      	OUT  0x35,R30
                 ; 0000 0078 MCUCSR=(0<<ISC2);
0000c1 bfe4      	OUT  0x34,R30
                 ; 0000 0079 
                 ; 0000 007A // USART initialization
                 ; 0000 007B // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 007C // USART Receiver: On
                 ; 0000 007D // USART Transmitter: On
                 ; 0000 007E // USART Mode: Asynchronous
                 ; 0000 007F // USART Baud Rate: 9600
                 ; 0000 0080 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000c2 b9eb      	OUT  0xB,R30
                 ; 0000 0081 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000c3 e1e8      	LDI  R30,LOW(24)
0000c4 b9ea      	OUT  0xA,R30
                 ; 0000 0082 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000c5 e8e6      	LDI  R30,LOW(134)
0000c6 bde0      	OUT  0x20,R30
                 ; 0000 0083 UBRRH=0x00;
0000c7 e0e0      	LDI  R30,LOW(0)
0000c8 bde0      	OUT  0x20,R30
                 ; 0000 0084 UBRRL=0x5F;
0000c9 e5ef      	LDI  R30,LOW(95)
0000ca b9e9      	OUT  0x9,R30
                 ; 0000 0085 
                 ; 0000 0086 // Analog Comparator initialization
                 ; 0000 0087 // Analog Comparator: Off
                 ; 0000 0088 // The Analog Comparator's positive input is
                 ; 0000 0089 // connected to the AIN0 pin
                 ; 0000 008A // The Analog Comparator's negative input is
                 ; 0000 008B // connected to the AIN1 pin
                 ; 0000 008C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000cb e8e0      	LDI  R30,LOW(128)
0000cc b9e8      	OUT  0x8,R30
                 ; 0000 008D SFIOR=(0<<ACME);
0000cd e0e0      	LDI  R30,LOW(0)
0000ce bfe0      	OUT  0x30,R30
                 ; 0000 008E 
                 ; 0000 008F // ADC initialization
                 ; 0000 0090 // ADC disabled
                 ; 0000 0091 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000cf b9e6      	OUT  0x6,R30
                 ; 0000 0092 
                 ; 0000 0093 // SPI initialization
                 ; 0000 0094 // SPI disabled
                 ; 0000 0095 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000d0 b9ed      	OUT  0xD,R30
                 ; 0000 0096 
                 ; 0000 0097 // TWI initialization
                 ; 0000 0098 // TWI disabled
                 ; 0000 0099 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000d1 bfe6      	OUT  0x36,R30
                 ; 0000 009A 
                 ; 0000 009B // Alphanumeric LCD initialization
                 ; 0000 009C // Connections are specified in the
                 ; 0000 009D // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 009E // RS: PORTC Bit 0
                 ; 0000 009F // RD: PORTC Bit 1
                 ; 0000 00A0 // EN: PORTC Bit 2
                 ; 0000 00A1 // D4: PORTC Bit 4
                 ; 0000 00A2 // D5: PORTC Bit 5
                 ; 0000 00A3 // D6: PORTC Bit 6
                 ; 0000 00A4 // D7: PORTC Bit 7
                 ; 0000 00A5 // Characters/line: 16
                 ; 0000 00A6 lcd_init(16);
0000d2 e1a0      	LDI  R26,LOW(16)
0000d3 d0b3      	RCALL _lcd_init
                 ; 0000 00A7 
                 ; 0000 00A8 while (1)
                 _0x3:
                 ; 0000 00A9 {
                 ; 0000 00AA if (PINB.0)
0000d4 9bb0      	SBIS 0x16,0
0000d5 c003      	RJMP _0x6
                 ; 0000 00AB {
                 ; 0000 00AC cont = cont + 1;
0000d6 01f2      	MOVW R30,R4
0000d7 9631      	ADIW R30,1
0000d8 d29c      	RCALL SUBOPT_0x0
                 ; 0000 00AD printf("Numero de pessoas no interior: = %d.\r\n",cont);
                 ; 0000 00AE 
                 ; 0000 00AF };
                 _0x6:
                 ; 0000 00B0 delay_ms(400);
0000d9 e9a0      	LDI  R26,LOW(400)
0000da e0b1      	LDI  R27,HIGH(400)
0000db d315      	RCALL _delay_ms
                 ; 0000 00B1 
                 ; 0000 00B2 if (PINB.1)
0000dc 9bb1      	SBIS 0x16,1
0000dd c00e      	RJMP _0x7
                 ; 0000 00B3 {
                 ; 0000 00B4 if(cont == 0)
0000de 2c04      	MOV  R0,R4
0000df 2805      	OR   R0,R5
0000e0 f441      	BRNE _0x8
                 ; 0000 00B5 {
                 ; 0000 00B6 printf("Ambiente vazio \r\n");
                +
0000e1 e8ed     +LDI R30 , LOW ( 2 * _0x0 + ( 39 ) )
0000e2 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 39 ) )
                 	__POINTW1FN _0x0,39
0000e3 93fa      	ST   -Y,R31
0000e4 93ea      	ST   -Y,R30
0000e5 e080      	LDI  R24,0
0000e6 d258      	RCALL _printf
0000e7 9622      	ADIW R28,2
                 ; 0000 00B7 }
                 ; 0000 00B8 
                 ; 0000 00B9 else
0000e8 c003      	RJMP _0x9
                 _0x8:
                 ; 0000 00BA {
                 ; 0000 00BB cont = cont - 1;
0000e9 01f2      	MOVW R30,R4
0000ea 9731      	SBIW R30,1
0000eb d289      	RCALL SUBOPT_0x0
                 ; 0000 00BC printf("Numero de pessoas no interior: = %d.\r\n",cont);
                 ; 0000 00BD }
                 _0x9:
                 ; 0000 00BE 
                 ; 0000 00BF 
                 ; 0000 00C0 };
                 _0x7:
                 ; 0000 00C1 delay_ms(400);
0000ec e9a0      	LDI  R26,LOW(400)
0000ed e0b1      	LDI  R27,HIGH(400)
0000ee d302      	RCALL _delay_ms
                 ; 0000 00C2 
                 ; 0000 00C3 if (cont == 0 )
0000ef 2c04      	MOV  R0,R4
0000f0 2805      	OR   R0,R5
0000f1 f421      	BRNE _0xA
                 ; 0000 00C4 {
                 ; 0000 00C5 sprintf(aviso,"AMBIENTE VAZIO");
0000f2 d28e      	RCALL SUBOPT_0x1
                +
0000f3 e9ef     +LDI R30 , LOW ( 2 * _0x0 + ( 57 ) )
0000f4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 57 ) )
                 	__POINTW1FN _0x0,57
0000f5 d290      	RCALL SUBOPT_0x2
                 ; 0000 00C6 lcd_clear();
                 ; 0000 00C7 lcd_puts(aviso);
                 ; 0000 00C8 };
                 _0xA:
                 ; 0000 00C9 
                 ; 0000 00CA 
                 ; 0000 00CB if (cont == 4)
0000f6 e0e4      	LDI  R30,LOW(4)
0000f7 e0f0      	LDI  R31,HIGH(4)
0000f8 15e4      	CP   R30,R4
0000f9 05f5      	CPC  R31,R5
0000fa f421      	BRNE _0xB
                 ; 0000 00CC {
                 ; 0000 00CD sprintf(aviso,"MANTER DISTANCIA");
0000fb d285      	RCALL SUBOPT_0x1
                +
0000fc eaee     +LDI R30 , LOW ( 2 * _0x0 + ( 72 ) )
0000fd e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 72 ) )
                 	__POINTW1FN _0x0,72
0000fe d287      	RCALL SUBOPT_0x2
                 ; 0000 00CE lcd_clear();
                 ; 0000 00CF lcd_puts(aviso);
                 ; 0000 00D0 };
                 _0xB:
                 ; 0000 00D1 
                 ; 0000 00D2 
                 ; 0000 00D3 if (cont == 8)
0000ff e0e8      	LDI  R30,LOW(8)
000100 e0f0      	LDI  R31,HIGH(8)
000101 15e4      	CP   R30,R4
000102 05f5      	CPC  R31,R5
000103 f421      	BRNE _0xC
                 ; 0000 00D4 {
                 ; 0000 00D5 sprintf(aviso,"CAPACIDADE MAX");
000104 d27c      	RCALL SUBOPT_0x1
                +
000105 ebef     +LDI R30 , LOW ( 2 * _0x0 + ( 89 ) )
000106 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 89 ) )
                 	__POINTW1FN _0x0,89
000107 d27e      	RCALL SUBOPT_0x2
                 ; 0000 00D6 lcd_clear();
                 ; 0000 00D7 lcd_puts(aviso);
                 ; 0000 00D8 };
                 _0xC:
                 ; 0000 00D9 
                 ; 0000 00DA 
                 ; 0000 00DB if (cont >= 9)
000108 e0e9      	LDI  R30,LOW(9)
000109 e0f0      	LDI  R31,HIGH(9)
00010a 164e      	CP   R4,R30
00010b 065f      	CPC  R5,R31
00010c f024      	BRLT _0xD
                 ; 0000 00DC {
                 ; 0000 00DD sprintf(aviso,"FAVOR RETIRAR-SE");
00010d d273      	RCALL SUBOPT_0x1
                +
00010e ecee     +LDI R30 , LOW ( 2 * _0x0 + ( 104 ) )
00010f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 104 ) )
                 	__POINTW1FN _0x0,104
000110 d275      	RCALL SUBOPT_0x2
                 ; 0000 00DE lcd_clear();
                 ; 0000 00DF lcd_puts(aviso);
                 ; 0000 00E0 };
                 _0xD:
                 ; 0000 00E1 
                 ; 0000 00E2 
                 ; 0000 00E3 
                 ; 0000 00E4 lcd_gotoxy(7,1);
000111 e0e7      	LDI  R30,LOW(7)
000112 93ea      	ST   -Y,R30
000113 e0a1      	LDI  R26,LOW(1)
000114 d034      	RCALL _lcd_gotoxy
                 ; 0000 00E5 sprintf(lotacao,"%d", cont);
000115 e6e0      	LDI  R30,LOW(_lotacao)
000116 e0f1      	LDI  R31,HIGH(_lotacao)
000117 93fa      	ST   -Y,R31
000118 93ea      	ST   -Y,R30
                +
000119 edef     +LDI R30 , LOW ( 2 * _0x0 + ( 121 ) )
00011a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 121 ) )
                 	__POINTW1FN _0x0,121
00011b 93fa      	ST   -Y,R31
00011c 93ea      	ST   -Y,R30
00011d 01f2      	MOVW R30,R4
00011e d2c0      	RCALL __CWD1
00011f d2cc      	RCALL __PUTPARD1
000120 e084      	LDI  R24,4
000121 d1f2      	RCALL _sprintf
000122 9628      	ADIW R28,8
                 ; 0000 00E6 lcd_puts(lotacao);
000123 e6a0      	LDI  R26,LOW(_lotacao)
000124 e0b1      	LDI  R27,HIGH(_lotacao)
000125 d052      	RCALL _lcd_puts
                 ; 0000 00E7 
                 ; 0000 00E8 
                 ; 0000 00E9 
                 ; 0000 00EA 
                 ; 0000 00EB 
                 ; 0000 00EC 
                 ; 0000 00ED }
000126 cfad      	RJMP _0x3
                 ; 0000 00EE }
                 _0xE:
000127 cfff      	RJMP _0xE
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000128 931a      	ST   -Y,R17
000129 2f1a      	MOV  R17,R26
00012a b3e5      	IN   R30,0x15
00012b 70ef      	ANDI R30,LOW(0xF)
00012c 2fae      	MOV  R26,R30
00012d 2fe1      	MOV  R30,R17
00012e 7fe0      	ANDI R30,LOW(0xF0)
00012f 2bea      	OR   R30,R26
000130 bbe5      	OUT  0x15,R30
                +
000131 e189     +LDI R24 , LOW ( 25 )
                +__DELAY_USB_LOOP :
000132 958a     +DEC R24
000133 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 25
000134 9aaa      	SBI  0x15,2
                +
000135 e189     +LDI R24 , LOW ( 25 )
                +__DELAY_USB_LOOP :
000136 958a     +DEC R24
000137 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 25
000138 98aa      	CBI  0x15,2
                +
000139 e189     +LDI R24 , LOW ( 25 )
                +__DELAY_USB_LOOP :
00013a 958a     +DEC R24
00013b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 25
00013c c073      	RJMP _0x2080003
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00013d 93aa      	ST   -Y,R26
00013e 81a8      	LD   R26,Y
00013f dfe8      	RCALL __lcd_write_nibble_G100
000140 81e8          ld    r30,y
000141 95e2          swap  r30
000142 83e8          st    y,r30
000143 81a8      	LD   R26,Y
000144 dfe3      	RCALL __lcd_write_nibble_G100
                +
000145 ef86     +LDI R24 , LOW ( 246 )
                +__DELAY_USB_LOOP :
000146 958a     +DEC R24
000147 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 246
000148 c06e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000149 931a      	ST   -Y,R17
00014a 930a      	ST   -Y,R16
00014b 2f1a      	MOV  R17,R26
00014c 810a      	LDD  R16,Y+2
00014d 2fe1      	MOV  R30,R17
00014e e0f0      	LDI  R31,0
00014f 55ee      	SUBI R30,LOW(-__base_y_G100)
000150 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000151 81e0      	LD   R30,Z
000152 0fe0      	ADD  R30,R16
000153 2fae      	MOV  R26,R30
000154 dfe8      	RCALL __lcd_write_data
000155 2e70      	MOV  R7,R16
000156 2e61      	MOV  R6,R17
000157 8119      	LDD  R17,Y+1
000158 8108      	LDD  R16,Y+0
000159 9623      	ADIW R28,3
00015a 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00015b e0a2      	LDI  R26,LOW(2)
00015c d232      	RCALL SUBOPT_0x3
00015d e0ac      	LDI  R26,LOW(12)
00015e dfde      	RCALL __lcd_write_data
00015f e0a1      	LDI  R26,LOW(1)
000160 d22e      	RCALL SUBOPT_0x3
000161 e0e0      	LDI  R30,LOW(0)
000162 2e6e      	MOV  R6,R30
000163 2e7e      	MOV  R7,R30
000164 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000165 931a      	ST   -Y,R17
000166 2f1a      	MOV  R17,R26
000167 301a      	CPI  R17,10
000168 f011      	BREQ _0x2000005
000169 1479      	CP   R7,R9
00016a f038      	BRLO _0x2000004
                 _0x2000005:
00016b e0e0      	LDI  R30,LOW(0)
00016c 93ea      	ST   -Y,R30
00016d 9463      	INC  R6
00016e 2da6      	MOV  R26,R6
00016f dfd9      	RCALL _lcd_gotoxy
000170 301a      	CPI  R17,10
000171 f1f1      	BREQ _0x2080003
                 _0x2000004:
000172 9473      	INC  R7
000173 9aa8      	SBI  0x15,0
000174 2fa1      	MOV  R26,R17
000175 dfc7      	RCALL __lcd_write_data
000176 98a8      	CBI  0x15,0
000177 c038      	RJMP _0x2080003
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000178 d24e      	RCALL __SAVELOCR4
000179 019d      	MOVW R18,R26
                 _0x2000008:
00017a 01d9      	MOVW R26,R18
                +
00017b 5f2f     +SUBI R18 , LOW ( - 1 )
00017c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00017d 91ec      	LD   R30,X
00017e 2f1e      	MOV  R17,R30
00017f 30e0      	CPI  R30,0
000180 f019      	BREQ _0x200000A
000181 2fa1      	MOV  R26,R17
000182 dfe2      	RCALL _lcd_putchar
000183 cff6      	RJMP _0x2000008
                 _0x200000A:
000184 d249      	RCALL __LOADLOCR4
000185 9624      	ADIW R28,4
000186 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000187 931a      	ST   -Y,R17
000188 2f1a      	MOV  R17,R26
000189 b3e4      	IN   R30,0x14
00018a 6fe0      	ORI  R30,LOW(0xF0)
00018b bbe4      	OUT  0x14,R30
00018c 9aa2      	SBI  0x14,2
00018d 9aa0      	SBI  0x14,0
00018e 9aa1      	SBI  0x14,1
00018f 98aa      	CBI  0x15,2
000190 98a8      	CBI  0x15,0
000191 98a9      	CBI  0x15,1
000192 2e91      	MOV  R9,R17
000193 2fe1      	MOV  R30,R17
000194 58e0      	SUBI R30,-LOW(128)
                +
000195 93e0 01a4+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000197 2fe1      	MOV  R30,R17
000198 54e0      	SUBI R30,-LOW(192)
                +
000199 93e0 01a5+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00019b e1a4      	LDI  R26,LOW(20)
00019c e0b0      	LDI  R27,0
00019d d253      	RCALL _delay_ms
00019e d1f4      	RCALL SUBOPT_0x4
00019f d1f3      	RCALL SUBOPT_0x4
0001a0 d1f2      	RCALL SUBOPT_0x4
0001a1 e2a0      	LDI  R26,LOW(32)
0001a2 df85      	RCALL __lcd_write_nibble_G100
                +
0001a3 e781     +LDI R24 , LOW ( 369 )
0001a4 e091     +LDI R25 , HIGH ( 369 )
                +__DELAY_USW_LOOP :
0001a5 9701     +SBIW R24 , 1
0001a6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 369
0001a7 e2a8      	LDI  R26,LOW(40)
0001a8 df94      	RCALL __lcd_write_data
0001a9 e0a4      	LDI  R26,LOW(4)
0001aa df92      	RCALL __lcd_write_data
0001ab e8a5      	LDI  R26,LOW(133)
0001ac df90      	RCALL __lcd_write_data
0001ad e0a6      	LDI  R26,LOW(6)
0001ae df8e      	RCALL __lcd_write_data
0001af dfab      	RCALL _lcd_clear
                 _0x2080003:
0001b0 9119      	LD   R17,Y+
0001b1 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0001b2 93aa      	ST   -Y,R26
                 putchar0:
0001b3 9b5d           sbis usr,udre
0001b4 cffe           rjmp putchar0
0001b5 81e8           ld   r30,y
0001b6 b9ec           out  udr,r30
                 _0x2080002:
0001b7 9621      	ADIW R28,1
0001b8 9508      	RET
                 ; .FEND
                 _put_usart_G101:
                 ; .FSTART _put_usart_G101
0001b9 d20d      	RCALL __SAVELOCR4
0001ba 018d      	MOVW R16,R26
0001bb 813c      	LDD  R19,Y+4
0001bc 2fa3      	MOV  R26,R19
0001bd dff4      	RCALL _putchar
0001be 01d8      	MOVW R26,R16
0001bf d1da      	RCALL SUBOPT_0x5
0001c0 d20d      	RCALL __LOADLOCR4
0001c1 9625      	ADIW R28,5
0001c2 9508      	RET
                 ; .FEND
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0001c3 d201      	RCALL __SAVELOCR6
0001c4 019d      	MOVW R18,R26
0001c5 815e      	LDD  R21,Y+6
0001c6 9612      	ADIW R26,2
0001c7 d21c      	RCALL __GETW1P
0001c8 9730      	SBIW R30,0
0001c9 f0e1      	BREQ _0x2020010
0001ca 01d9      	MOVW R26,R18
0001cb 9614      	ADIW R26,4
0001cc d217      	RCALL __GETW1P
0001cd 018f      	MOVW R16,R30
0001ce 9730      	SBIW R30,0
0001cf f059      	BREQ _0x2020012
                +
0001d0 3002     +CPI R16 , LOW ( 2 )
0001d1 e0e0     +LDI R30 , HIGH ( 2 )
0001d2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001d3 f060      	BRLO _0x2020013
0001d4 01f8      	MOVW R30,R16
0001d5 9731      	SBIW R30,1
0001d6 018f      	MOVW R16,R30
                +
0001d7 01d9     +MOVW R26 , R18
0001d8 9614     +ADIW R26 , 4
0001d9 93ed     +ST X + , R30
0001da 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2020012:
0001db 01d9      	MOVW R26,R18
0001dc 9612      	ADIW R26,2
0001dd d1bc      	RCALL SUBOPT_0x5
0001de 9731      	SBIW R30,1
0001df 8350      	ST   Z,R21
                 _0x2020013:
0001e0 01d9      	MOVW R26,R18
0001e1 d202      	RCALL __GETW1P
0001e2 23ff      	TST  R31
0001e3 f00a      	BRMI _0x2020014
0001e4 d1b5      	RCALL SUBOPT_0x5
                 _0x2020014:
0001e5 c005      	RJMP _0x2020015
                 _0x2020010:
0001e6 01d9      	MOVW R26,R18
0001e7 efef      	LDI  R30,LOW(65535)
0001e8 efff      	LDI  R31,HIGH(65535)
0001e9 93ed      	ST   X+,R30
0001ea 93fc      	ST   X,R31
                 _0x2020015:
0001eb d1e0      	RCALL __LOADLOCR6
0001ec 9627      	ADIW R28,7
0001ed 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001ee 93ba      	ST   -Y,R27
0001ef 93aa      	ST   -Y,R26
0001f0 9726      	SBIW R28,6
0001f1 d1d3      	RCALL __SAVELOCR6
0001f2 e010      	LDI  R17,0
0001f3 85ac      	LDD  R26,Y+12
0001f4 85bd      	LDD  R27,Y+12+1
0001f5 e0e0      	LDI  R30,LOW(0)
0001f6 e0f0      	LDI  R31,HIGH(0)
0001f7 93ed      	ST   X+,R30
0001f8 93fc      	ST   X,R31
                 _0x2020016:
0001f9 89ea      	LDD  R30,Y+18
0001fa 89fb      	LDD  R31,Y+18+1
0001fb 9631      	ADIW R30,1
0001fc 8bea      	STD  Y+18,R30
0001fd 8bfb      	STD  Y+18+1,R31
0001fe 9731      	SBIW R30,1
0001ff 91e4      	LPM  R30,Z
000200 2f2e      	MOV  R18,R30
000201 30e0      	CPI  R30,0
000202 f409      	BRNE PC+2
000203 c109      	RJMP _0x2020018
000204 2fe1      	MOV  R30,R17
000205 30e0      	CPI  R30,0
000206 f431      	BRNE _0x202001C
000207 3225      	CPI  R18,37
000208 f411      	BRNE _0x202001D
000209 e011      	LDI  R17,LOW(1)
00020a c001      	RJMP _0x202001E
                 _0x202001D:
00020b d194      	RCALL SUBOPT_0x6
                 _0x202001E:
00020c c0ff      	RJMP _0x202001B
                 _0x202001C:
00020d 30e1      	CPI  R30,LOW(0x1)
00020e f4a1      	BRNE _0x202001F
00020f 3225      	CPI  R18,37
000210 f411      	BRNE _0x2020020
000211 d18e      	RCALL SUBOPT_0x6
000212 c0f8      	RJMP _0x20200CC
                 _0x2020020:
000213 e012      	LDI  R17,LOW(2)
000214 e040      	LDI  R20,LOW(0)
000215 e000      	LDI  R16,LOW(0)
000216 322d      	CPI  R18,45
000217 f411      	BRNE _0x2020021
000218 e001      	LDI  R16,LOW(1)
000219 c0f2      	RJMP _0x202001B
                 _0x2020021:
00021a 322b      	CPI  R18,43
00021b f411      	BRNE _0x2020022
00021c e24b      	LDI  R20,LOW(43)
00021d c0ee      	RJMP _0x202001B
                 _0x2020022:
00021e 3220      	CPI  R18,32
00021f f411      	BRNE _0x2020023
000220 e240      	LDI  R20,LOW(32)
000221 c0ea      	RJMP _0x202001B
                 _0x2020023:
000222 c002      	RJMP _0x2020024
                 _0x202001F:
000223 30e2      	CPI  R30,LOW(0x2)
000224 f439      	BRNE _0x2020025
                 _0x2020024:
000225 e050      	LDI  R21,LOW(0)
000226 e013      	LDI  R17,LOW(3)
000227 3320      	CPI  R18,48
000228 f411      	BRNE _0x2020026
000229 6800      	ORI  R16,LOW(128)
00022a c0e1      	RJMP _0x202001B
                 _0x2020026:
00022b c003      	RJMP _0x2020027
                 _0x2020025:
00022c 30e3      	CPI  R30,LOW(0x3)
00022d f009      	BREQ PC+2
00022e c0dd      	RJMP _0x202001B
                 _0x2020027:
00022f 3320      	CPI  R18,48
000230 f010      	BRLO _0x202002A
000231 332a      	CPI  R18,58
000232 f008      	BRLO _0x202002B
                 _0x202002A:
000233 c007      	RJMP _0x2020029
                 _0x202002B:
000234 e0aa      	LDI  R26,LOW(10)
000235 9f5a      	MUL  R21,R26
000236 2d50      	MOV  R21,R0
000237 2fe2      	MOV  R30,R18
000238 53e0      	SUBI R30,LOW(48)
000239 0f5e      	ADD  R21,R30
00023a c0d1      	RJMP _0x202001B
                 _0x2020029:
00023b 2fe2      	MOV  R30,R18
00023c 36e3      	CPI  R30,LOW(0x63)
00023d f439      	BRNE _0x202002F
00023e d168      	RCALL SUBOPT_0x7
00023f 89e8      	LDD  R30,Y+16
000240 89f9      	LDD  R31,Y+16+1
000241 81a4      	LDD  R26,Z+4
000242 93aa      	ST   -Y,R26
000243 d169      	RCALL SUBOPT_0x8
000244 c0c6      	RJMP _0x2020030
                 _0x202002F:
000245 37e3      	CPI  R30,LOW(0x73)
000246 f429      	BRNE _0x2020032
000247 d15f      	RCALL SUBOPT_0x7
000248 d16a      	RCALL SUBOPT_0x9
000249 d112      	RCALL _strlen
00024a 2f1e      	MOV  R17,R30
00024b c007      	RJMP _0x2020033
                 _0x2020032:
00024c 37e0      	CPI  R30,LOW(0x70)
00024d f449      	BRNE _0x2020035
00024e d158      	RCALL SUBOPT_0x7
00024f d163      	RCALL SUBOPT_0x9
000250 d117      	RCALL _strlenf
000251 2f1e      	MOV  R17,R30
000252 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000253 6002      	ORI  R16,LOW(2)
000254 770f      	ANDI R16,LOW(127)
000255 e030      	LDI  R19,LOW(0)
000256 c038      	RJMP _0x2020036
                 _0x2020035:
000257 36e4      	CPI  R30,LOW(0x64)
000258 f011      	BREQ _0x2020039
000259 36e9      	CPI  R30,LOW(0x69)
00025a f411      	BRNE _0x202003A
                 _0x2020039:
00025b 6004      	ORI  R16,LOW(4)
00025c c002      	RJMP _0x202003B
                 _0x202003A:
00025d 37e5      	CPI  R30,LOW(0x75)
00025e f431      	BRNE _0x202003C
                 _0x202003B:
00025f e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000260 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000261 83ee      	STD  Y+6,R30
000262 83ff      	STD  Y+6+1,R31
000263 e015      	LDI  R17,LOW(5)
000264 c00c      	RJMP _0x202003D
                 _0x202003C:
000265 35e8      	CPI  R30,LOW(0x58)
000266 f411      	BRNE _0x202003F
000267 6008      	ORI  R16,LOW(8)
000268 c003      	RJMP _0x2020040
                 _0x202003F:
000269 37e8      	CPI  R30,LOW(0x78)
00026a f009      	BREQ PC+2
00026b c09f      	RJMP _0x2020071
                 _0x2020040:
00026c e5ee      	LDI  R30,LOW(_tbl16_G101*2)
00026d e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00026e 83ee      	STD  Y+6,R30
00026f 83ff      	STD  Y+6+1,R31
000270 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000271 ff02      	SBRS R16,2
000272 c015      	RJMP _0x2020042
000273 d133      	RCALL SUBOPT_0x7
000274 89a8      	LDD  R26,Y+16
000275 89b9      	LDD  R27,Y+16+1
000276 9614      	ADIW R26,4
000277 91ed      	LD   R30,X+
000278 91fd      	LD   R31,X+
000279 87ea      	STD  Y+10,R30
00027a 87fb      	STD  Y+10+1,R31
00027b 85ab      	LDD  R26,Y+11
00027c 23aa      	TST  R26
00027d f422      	BRPL _0x2020043
00027e d15c      	RCALL __ANEGW1
00027f 87ea      	STD  Y+10,R30
000280 87fb      	STD  Y+10+1,R31
000281 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000282 3040      	CPI  R20,0
000283 f011      	BREQ _0x2020044
000284 5f1f      	SUBI R17,-LOW(1)
000285 c001      	RJMP _0x2020045
                 _0x2020044:
000286 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000287 c007      	RJMP _0x2020046
                 _0x2020042:
000288 d11e      	RCALL SUBOPT_0x7
000289 89a8      	LDD  R26,Y+16
00028a 89b9      	LDD  R27,Y+16+1
00028b 9614      	ADIW R26,4
00028c d157      	RCALL __GETW1P
00028d 87ea      	STD  Y+10,R30
00028e 87fb      	STD  Y+10+1,R31
                 _0x2020046:
                 _0x2020036:
00028f fd00      	SBRC R16,0
000290 c010      	RJMP _0x2020047
                 _0x2020048:
000291 1715      	CP   R17,R21
000292 f470      	BRSH _0x202004A
000293 ff07      	SBRS R16,7
000294 c008      	RJMP _0x202004B
000295 ff02      	SBRS R16,2
000296 c004      	RJMP _0x202004C
000297 7f0b      	ANDI R16,LOW(251)
000298 2f24      	MOV  R18,R20
000299 5011      	SUBI R17,LOW(1)
00029a c001      	RJMP _0x202004D
                 _0x202004C:
00029b e320      	LDI  R18,LOW(48)
                 _0x202004D:
00029c c001      	RJMP _0x202004E
                 _0x202004B:
00029d e220      	LDI  R18,LOW(32)
                 _0x202004E:
00029e d101      	RCALL SUBOPT_0x6
00029f 5051      	SUBI R21,LOW(1)
0002a0 cff0      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0002a1 2f31      	MOV  R19,R17
0002a2 ff01      	SBRS R16,1
0002a3 c016      	RJMP _0x202004F
                 _0x2020050:
0002a4 3030      	CPI  R19,0
0002a5 f099      	BREQ _0x2020052
0002a6 ff03      	SBRS R16,3
0002a7 c006      	RJMP _0x2020053
0002a8 81ee      	LDD  R30,Y+6
0002a9 81ff      	LDD  R31,Y+6+1
0002aa 9125      	LPM  R18,Z+
0002ab 83ee      	STD  Y+6,R30
0002ac 83ff      	STD  Y+6+1,R31
0002ad c005      	RJMP _0x2020054
                 _0x2020053:
0002ae 81ae      	LDD  R26,Y+6
0002af 81bf      	LDD  R27,Y+6+1
0002b0 912d      	LD   R18,X+
0002b1 83ae      	STD  Y+6,R26
0002b2 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0002b3 d0ec      	RCALL SUBOPT_0x6
0002b4 3050      	CPI  R21,0
0002b5 f009      	BREQ _0x2020055
0002b6 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0002b7 5031      	SUBI R19,LOW(1)
0002b8 cfeb      	RJMP _0x2020050
                 _0x2020052:
0002b9 c048      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0002ba e320      	LDI  R18,LOW(48)
0002bb 81ee      	LDD  R30,Y+6
0002bc 81ff      	LDD  R31,Y+6+1
0002bd d12a      	RCALL __GETW1PF
0002be 87e8      	STD  Y+8,R30
0002bf 87f9      	STD  Y+8+1,R31
0002c0 81ee      	LDD  R30,Y+6
0002c1 81ff      	LDD  R31,Y+6+1
0002c2 9632      	ADIW R30,2
0002c3 83ee      	STD  Y+6,R30
0002c4 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0002c5 85e8      	LDD  R30,Y+8
0002c6 85f9      	LDD  R31,Y+8+1
0002c7 85aa      	LDD  R26,Y+10
0002c8 85bb      	LDD  R27,Y+10+1
0002c9 17ae      	CP   R26,R30
0002ca 07bf      	CPC  R27,R31
0002cb f050      	BRLO _0x202005C
0002cc 5f2f      	SUBI R18,-LOW(1)
0002cd 85a8      	LDD  R26,Y+8
0002ce 85b9      	LDD  R27,Y+8+1
0002cf 85ea      	LDD  R30,Y+10
0002d0 85fb      	LDD  R31,Y+10+1
0002d1 1bea      	SUB  R30,R26
0002d2 0bfb      	SBC  R31,R27
0002d3 87ea      	STD  Y+10,R30
0002d4 87fb      	STD  Y+10+1,R31
0002d5 cfef      	RJMP _0x202005A
                 _0x202005C:
0002d6 332a      	CPI  R18,58
0002d7 f028      	BRLO _0x202005D
0002d8 ff03      	SBRS R16,3
0002d9 c002      	RJMP _0x202005E
0002da 5f29      	SUBI R18,-LOW(7)
0002db c001      	RJMP _0x202005F
                 _0x202005E:
0002dc 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002dd fd04      	SBRC R16,4
0002de c019      	RJMP _0x2020061
0002df 3321      	CPI  R18,49
0002e0 f420      	BRSH _0x2020063
0002e1 85a8      	LDD  R26,Y+8
0002e2 85b9      	LDD  R27,Y+8+1
0002e3 9711      	SBIW R26,1
0002e4 f409      	BRNE _0x2020062
                 _0x2020063:
0002e5 c009      	RJMP _0x20200CD
                 _0x2020062:
0002e6 1753      	CP   R21,R19
0002e7 f010      	BRLO _0x2020067
0002e8 ff00      	SBRS R16,0
0002e9 c001      	RJMP _0x2020068
                 _0x2020067:
0002ea c011      	RJMP _0x2020066
                 _0x2020068:
0002eb e220      	LDI  R18,LOW(32)
0002ec ff07      	SBRS R16,7
0002ed c00a      	RJMP _0x2020069
0002ee e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002ef 6100      	ORI  R16,LOW(16)
0002f0 ff02      	SBRS R16,2
0002f1 c006      	RJMP _0x202006A
0002f2 7f0b      	ANDI R16,LOW(251)
0002f3 934a      	ST   -Y,R20
0002f4 d0b8      	RCALL SUBOPT_0x8
0002f5 3050      	CPI  R21,0
0002f6 f009      	BREQ _0x202006B
0002f7 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002f8 d0a7      	RCALL SUBOPT_0x6
0002f9 3050      	CPI  R21,0
0002fa f009      	BREQ _0x202006C
0002fb 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002fc 5031      	SUBI R19,LOW(1)
0002fd 85a8      	LDD  R26,Y+8
0002fe 85b9      	LDD  R27,Y+8+1
0002ff 9712      	SBIW R26,2
000300 f008      	BRLO _0x2020059
000301 cfb8      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000302 ff00      	SBRS R16,0
000303 c007      	RJMP _0x202006D
                 _0x202006E:
000304 3050      	CPI  R21,0
000305 f029      	BREQ _0x2020070
000306 5051      	SUBI R21,LOW(1)
000307 e2e0      	LDI  R30,LOW(32)
000308 93ea      	ST   -Y,R30
000309 d0a3      	RCALL SUBOPT_0x8
00030a cff9      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
00030b e010      	LDI  R17,LOW(0)
                 _0x202001B:
00030c ceec      	RJMP _0x2020016
                 _0x2020018:
00030d 85ac      	LDD  R26,Y+12
00030e 85bd      	LDD  R27,Y+12+1
00030f 91ed      	LD   R30,X+
000310 91fd      	LD   R31,X+
000311 d0ba      	RCALL __LOADLOCR6
000312 9664      	ADIW R28,20
000313 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000314 92ff      	PUSH R15
000315 2ef8      	MOV  R15,R24
000316 9726      	SBIW R28,6
000317 d0ad      	RCALL __SAVELOCR6
000318 01fe      	MOVW R30,R28
000319 d0b9      	RCALL __ADDW1R15
                +
00031a 8546     +LDD R20 , Z + 14
00031b 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
00031c 2e04      	MOV  R0,R20
00031d 2a05      	OR   R0,R21
00031e f419      	BRNE _0x2020072
00031f efef      	LDI  R30,LOW(65535)
000320 efff      	LDI  R31,HIGH(65535)
000321 c019      	RJMP _0x2080001
                 _0x2020072:
000322 01de      	MOVW R26,R28
000323 9618      	ADIW R26,8
000324 d0b2      	RCALL __ADDW2R15
000325 018d      	MOVW R16,R26
                +
000326 8748     +STD Y + 8 , R20
000327 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
000328 e0e0      	LDI  R30,LOW(0)
000329 87ea      	STD  Y+10,R30
00032a 87eb      	STD  Y+10+1,R30
00032b 01de      	MOVW R26,R28
00032c 961c      	ADIW R26,12
00032d d08f      	RCALL SUBOPT_0xA
00032e ece3      	LDI  R30,LOW(_put_buff_G101)
00032f e0f1      	LDI  R31,HIGH(_put_buff_G101)
000330 93fa      	ST   -Y,R31
000331 93ea      	ST   -Y,R30
000332 01de      	MOVW R26,R28
000333 961c      	ADIW R26,12
000334 deb9      	RCALL __print_G101
000335 019f      	MOVW R18,R30
000336 85a8      	LDD  R26,Y+8
000337 85b9      	LDD  R27,Y+8+1
000338 e0e0      	LDI  R30,LOW(0)
000339 93ec      	ST   X,R30
00033a 01f9      	MOVW R30,R18
                 _0x2080001:
00033b d090      	RCALL __LOADLOCR6
00033c 962c      	ADIW R28,12
00033d 90ff      	POP  R15
00033e 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
00033f 92ff      	PUSH R15
000340 2ef8      	MOV  R15,R24
000341 9726      	SBIW R28,6
000342 931a      	ST   -Y,R17
000343 930a      	ST   -Y,R16
000344 01de      	MOVW R26,R28
000345 9614      	ADIW R26,4
000346 d090      	RCALL __ADDW2R15
000347 018d      	MOVW R16,R26
000348 e0e0      	LDI  R30,LOW(0)
000349 83ec      	STD  Y+4,R30
00034a 83ed      	STD  Y+4+1,R30
00034b 83ee      	STD  Y+6,R30
00034c 83ef      	STD  Y+6+1,R30
00034d 01de      	MOVW R26,R28
00034e 9618      	ADIW R26,8
00034f d06d      	RCALL SUBOPT_0xA
000350 ebe9      	LDI  R30,LOW(_put_usart_G101)
000351 e0f1      	LDI  R31,HIGH(_put_usart_G101)
000352 93fa      	ST   -Y,R31
000353 93ea      	ST   -Y,R30
000354 01de      	MOVW R26,R28
000355 9618      	ADIW R26,8
000356 de97      	RCALL __print_G101
000357 8119      	LDD  R17,Y+1
000358 8108      	LDD  R16,Y+0
000359 9628      	ADIW R28,8
00035a 90ff      	POP  R15
00035b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00035c 93ba      	ST   -Y,R27
00035d 93aa      	ST   -Y,R26
00035e 91a9          ld   r26,y+
00035f 91b9          ld   r27,y+
000360 27ee          clr  r30
000361 27ff          clr  r31
                 strlen0:
000362 916d          ld   r22,x+
000363 2366          tst  r22
000364 f011          breq strlen1
000365 9631          adiw r30,1
000366 cffb          rjmp strlen0
                 strlen1:
000367 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000368 93ba      	ST   -Y,R27
000369 93aa      	ST   -Y,R26
00036a 27aa          clr  r26
00036b 27bb          clr  r27
00036c 91e9          ld   r30,y+
00036d 91f9          ld   r31,y+
                 strlenf0:
00036e 9005      	lpm  r0,z+
00036f 2000          tst  r0
000370 f011          breq strlenf1
000371 9611          adiw r26,1
000372 cffb          rjmp strlenf0
                 strlenf1:
000373 01fd          movw r30,r26
000374 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _lotacao:
000160           	.BYTE 0x21
                 _aviso:
000181           	.BYTE 0x21
                 __base_y_G100:
0001a2           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
000375 012f      	MOVW R4,R30
                +
000376 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000377 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000378 93fa      	ST   -Y,R31
000379 93ea      	ST   -Y,R30
00037a 01f2      	MOVW R30,R4
00037b d063      	RCALL __CWD1
00037c d06f      	RCALL __PUTPARD1
00037d e084      	LDI  R24,4
00037e dfc0      	RCALL _printf
00037f 9626      	ADIW R28,6
000380 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000381 e8e1      	LDI  R30,LOW(_aviso)
000382 e0f1      	LDI  R31,HIGH(_aviso)
000383 93fa      	ST   -Y,R31
000384 93ea      	ST   -Y,R30
000385 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x2:
000386 93fa      	ST   -Y,R31
000387 93ea      	ST   -Y,R30
000388 e080      	LDI  R24,0
000389 df8a      	RCALL _sprintf
00038a 9624      	ADIW R28,4
00038b ddcf      	RCALL _lcd_clear
00038c e8a1      	LDI  R26,LOW(_aviso)
00038d e0b1      	LDI  R27,HIGH(_aviso)
00038e cde9      	RJMP _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00038f ddad      	RCALL __lcd_write_data
000390 e0a3      	LDI  R26,LOW(3)
000391 e0b0      	LDI  R27,0
000392 c05e      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x4:
000393 e3a0      	LDI  R26,LOW(48)
000394 dd93      	RCALL __lcd_write_nibble_G100
                +
000395 e781     +LDI R24 , LOW ( 369 )
000396 e091     +LDI R25 , HIGH ( 369 )
                +__DELAY_USW_LOOP :
000397 9701     +SBIW R24 , 1
000398 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 369
000399 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
00039a 91ed      	LD   R30,X+
00039b 91fd      	LD   R31,X+
00039c 9631      	ADIW R30,1
00039d 93fe      	ST   -X,R31
00039e 93ee      	ST   -X,R30
00039f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x6:
0003a0 932a      	ST   -Y,R18
0003a1 85ad      	LDD  R26,Y+13
0003a2 85be      	LDD  R27,Y+13+1
0003a3 85ef      	LDD  R30,Y+15
0003a4 89f8      	LDD  R31,Y+15+1
0003a5 9509      	ICALL
0003a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x7:
0003a7 89e8      	LDD  R30,Y+16
0003a8 89f9      	LDD  R31,Y+16+1
0003a9 9734      	SBIW R30,4
0003aa 8be8      	STD  Y+16,R30
0003ab 8bf9      	STD  Y+16+1,R31
0003ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
0003ad 85ad      	LDD  R26,Y+13
0003ae 85be      	LDD  R27,Y+13+1
0003af 85ef      	LDD  R30,Y+15
0003b0 89f8      	LDD  R31,Y+15+1
0003b1 9509      	ICALL
0003b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x9:
0003b3 89a8      	LDD  R26,Y+16
0003b4 89b9      	LDD  R27,Y+16+1
0003b5 9614      	ADIW R26,4
0003b6 91ed      	LD   R30,X+
0003b7 91fd      	LD   R31,X+
0003b8 83ee      	STD  Y+6,R30
0003b9 83ff      	STD  Y+6+1,R31
0003ba 81ae      	LDD  R26,Y+6
0003bb 81bf      	LDD  R27,Y+6+1
0003bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
0003bd d019      	RCALL __ADDW2R15
0003be 91ed      	LD   R30,X+
0003bf 91fd      	LD   R31,X+
0003c0 93fa      	ST   -Y,R31
0003c1 93ea      	ST   -Y,R30
0003c2 931a      	ST   -Y,R17
0003c3 930a      	ST   -Y,R16
0003c4 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0003c5 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003c6 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003c7 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003c8 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003c9 931a      	ST   -Y,R17
0003ca 930a      	ST   -Y,R16
0003cb 9508      	RET
                 
                 __LOADLOCR6:
0003cc 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003cd 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003ce 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003cf 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003d0 8119      	LDD  R17,Y+1
0003d1 8108      	LD   R16,Y
0003d2 9508      	RET
                 
                 __ADDW1R15:
0003d3 2400      	CLR  R0
0003d4 0def      	ADD  R30,R15
0003d5 1df0      	ADC  R31,R0
0003d6 9508      	RET
                 
                 __ADDW2R15:
0003d7 2400      	CLR  R0
0003d8 0daf      	ADD  R26,R15
0003d9 1db0      	ADC  R27,R0
0003da 9508      	RET
                 
                 __ANEGW1:
0003db 95f1      	NEG  R31
0003dc 95e1      	NEG  R30
0003dd 40f0      	SBCI R31,0
0003de 9508      	RET
                 
                 __CWD1:
0003df 2f6f      	MOV  R22,R31
0003e0 0f66      	ADD  R22,R22
0003e1 0b66      	SBC  R22,R22
0003e2 2f76      	MOV  R23,R22
0003e3 9508      	RET
                 
                 __GETW1P:
0003e4 91ed      	LD   R30,X+
0003e5 91fc      	LD   R31,X
0003e6 9711      	SBIW R26,1
0003e7 9508      	RET
                 
                 __GETW1PF:
0003e8 9005      	LPM  R0,Z+
0003e9 91f4      	LPM  R31,Z
0003ea 2de0      	MOV  R30,R0
0003eb 9508      	RET
                 
                 __PUTPARD1:
0003ec 937a      	ST   -Y,R23
0003ed 936a      	ST   -Y,R22
0003ee 93fa      	ST   -Y,R31
0003ef 93ea      	ST   -Y,R30
0003f0 9508      	RET
                 
                 _delay_ms:
0003f1 9610      	adiw r26,0
0003f2 f039      	breq __delay_ms1
                 __delay_ms0:
0003f3 95a8      	wdr
                +
0003f4 e686     +LDI R24 , LOW ( 0xE66 )
0003f5 e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
0003f6 9701     +SBIW R24 , 1
0003f7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
0003f8 9711      	sbiw r26,1
0003f9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003fa 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  19 r1 :   1 r2 :   0 r3 :   0 r4 :  11 r5 :   6 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   8 
r16:  42 r17:  41 r18:  38 r19:  11 r20:  12 r21:  22 r22:  11 r23:   2 
r24:  27 r25:   5 r26: 102 r27:  31 r28:  23 r29:   1 r30: 226 r31:  79 
x  :  27 y  : 157 z  :  17 
Registers used: 27 out of 35 (77.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   5 
adiw  :  32 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   1 brmi  :   1 brne  :  33 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   5 cpi   :  33 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  22 ld    :  26 ldd   :  64 ldi   : 124 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  37 movw  :  33 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   4 
ori   :   7 out   :  47 pop   :   2 push  :   2 rcall :  90 ret   :  31 
reti  :   0 rjmp  :  64 rol   :   0 ror   :   0 sbc   :   2 sbci  :   3 
sbi   :   5 sbic  :   0 sbis  :   3 sbiw  :  20 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  65 std   :  34 sts   :   2 sub   :   1 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 53 out of 116 (45.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007f6   1886    152   2038   16384  12.4%
[.dseg] 0x000060 0x0001a6      0     70     70    1024   6.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
