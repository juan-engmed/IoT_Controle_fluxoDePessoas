
AVRASM ver. 2.1.30  C:\Users\Filipe\Desktop\FINAL2\Debug\List\final2.asm Sun Mar 07 17:30:48 2021

C:\Users\Filipe\Desktop\FINAL2\Debug\List\final2.asm(1083): warning: Register r4 already defined by the .DEF directive
C:\Users\Filipe\Desktop\FINAL2\Debug\List\final2.asm(1084): warning: Register r5 already defined by the .DEF directive
C:\Users\Filipe\Desktop\FINAL2\Debug\List\final2.asm(1085): warning: Register r6 already defined by the .DEF directive
C:\Users\Filipe\Desktop\FINAL2\Debug\List\final2.asm(1086): warning: Register r7 already defined by the .DEF directive
C:\Users\Filipe\Desktop\FINAL2\Debug\List\final2.asm(1087): warning: Register r8 already defined by the .DEF directive
C:\Users\Filipe\Desktop\FINAL2\Debug\List\final2.asm(1088): warning: Register r9 already defined by the .DEF directive
C:\Users\Filipe\Desktop\FINAL2\Debug\List\final2.asm(1089): warning: Register r10 already defined by the .DEF directive
C:\Users\Filipe\Desktop\FINAL2\Debug\List\final2.asm(1090): warning: Register r11 already defined by the .DEF directive
C:\Users\Filipe\Desktop\FINAL2\Debug\List\final2.asm(1091): warning: Register r13 already defined by the .DEF directive
C:\Users\Filipe\Desktop\FINAL2\Debug\List\final2.asm(1092): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.43 Evaluation
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 14,745600 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _cont=R4
                 	.DEF _cont_msb=R5
                 	.DEF _i=R6
                 	.DEF _i_msb=R7
                 	.DEF _j=R8
                 	.DEF _j_msb=R9
                 	.DEF _k=R10
                 	.DEF _k_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 008c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 0201
000034 0804
000035 2010
000036 8040      	.DB  0x1,0x2,0x4,0x8,0x10,0x20,0x40,0x80
                 _0x4:
000037 3c00
000038 4a46
000039 6252
00003a 003c      	.DB  0x0,0x3C,0x46,0x4A,0x52,0x62,0x3C,0x0
00003b 3c00
00003c 4a46
00003d 6252
00003e 003c      	.DB  0x0,0x3C,0x46,0x4A,0x52,0x62,0x3C,0x0
00003f 3c00
000040 4a46
000041 6252
C:\Users\Filipe\Desktop\FINAL2\Debug\List\final2.asm(1134): warning: .cseg .db misalignment - padding zero byte
000042 003c      	.DB  0x0,0x3C,0x46,0x4A,0x52,0x62,0x3C
                 _0x0:
000043 754e
000044 656d
000045 6f72
000046 6420      	.DB  0x4E,0x75,0x6D,0x65,0x72,0x6F,0x20,0x64
000047 2065
000048 6570
000049 7373
00004a 616f      	.DB  0x65,0x20,0x70,0x65,0x73,0x73,0x6F,0x61
00004b 2073
00004c 6f6e
00004d 6920
00004e 746e      	.DB  0x73,0x20,0x6E,0x6F,0x20,0x69,0x6E,0x74
00004f 7265
000050 6f69
000051 3a72
000052 3d20      	.DB  0x65,0x72,0x69,0x6F,0x72,0x3A,0x20,0x3D
000053 2520
000054 2e64
000055 0a0d
000056 4100      	.DB  0x20,0x25,0x64,0x2E,0xD,0xA,0x0,0x41
000057 626d
000058 6569
000059 746e
00005a 2065      	.DB  0x6D,0x62,0x69,0x65,0x6E,0x74,0x65,0x20
00005b 6176
00005c 697a
00005d 206f
00005e 0a0d      	.DB  0x76,0x61,0x7A,0x69,0x6F,0x20,0xD,0xA
00005f 4100
000060 424d
000061 4549
000062 544e      	.DB  0x0,0x41,0x4D,0x42,0x49,0x45,0x4E,0x54
000063 2045
000064 4156
000065 495a
000066 004f      	.DB  0x45,0x20,0x56,0x41,0x5A,0x49,0x4F,0x0
000067 414d
000068 544e
000069 5245
00006a 4420      	.DB  0x4D,0x41,0x4E,0x54,0x45,0x52,0x20,0x44
00006b 5349
00006c 4154
00006d 434e
00006e 4149      	.DB  0x49,0x53,0x54,0x41,0x4E,0x43,0x49,0x41
00006f 4300
000070 5041
000071 4341
000072 4449      	.DB  0x0,0x43,0x41,0x50,0x41,0x43,0x49,0x44
000073 4441
000074 2045
000075 414d
000076 0058      	.DB  0x41,0x44,0x45,0x20,0x4D,0x41,0x58,0x0
000077 4146
000078 4f56
000079 2052
00007a 4552      	.DB  0x46,0x41,0x56,0x4F,0x52,0x20,0x52,0x45
00007b 4954
00007c 4152
00007d 2d52
00007e 4553      	.DB  0x54,0x49,0x52,0x41,0x52,0x2D,0x53,0x45
00007f 2500
000080 0064      	.DB  0x0,0x25,0x64,0x0
                 _0x2020003:
000081 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000082 0008      	.DW  0x08
000083 01a2      	.DW  _a_p
000084 0066      	.DW  _0x3*2
                 
000085 0017      	.DW  0x17
000086 01aa      	.DW  _a_n
000087 006e      	.DW  _0x4*2
                 
000088 0002      	.DW  0x02
000089 01c2      	.DW  __base_y_G101
00008a 0102      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00008b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00008c 94f8      	CLI
00008d 27ee      	CLR  R30
00008e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00008f e0f1      	LDI  R31,1
000090 bffb      	OUT  GICR,R31
000091 bfeb      	OUT  GICR,R30
000092 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000093 e08d      	LDI  R24,(14-2)+1
000094 e0a2      	LDI  R26,2
000095 27bb      	CLR  R27
                 __CLEAR_REG:
000096 93ed      	ST   X+,R30
000097 958a      	DEC  R24
000098 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000099 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00009a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00009b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00009c 93ed      	ST   X+,R30
00009d 9701      	SBIW R24,1
00009e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00009f e0e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a0 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000a1 9185      	LPM  R24,Z+
0000a2 9195      	LPM  R25,Z+
0000a3 9700      	SBIW R24,0
0000a4 f061      	BREQ __GLOBAL_INI_END
0000a5 91a5      	LPM  R26,Z+
0000a6 91b5      	LPM  R27,Z+
0000a7 9005      	LPM  R0,Z+
0000a8 9015      	LPM  R1,Z+
0000a9 01bf      	MOVW R22,R30
0000aa 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000ab 9005      	LPM  R0,Z+
0000ac 920d      	ST   X+,R0
0000ad 9701      	SBIW R24,1
0000ae f7e1      	BRNE __GLOBAL_INI_LOOP
0000af 01fb      	MOVW R30,R22
0000b0 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000b1 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000b2 bfed      	OUT  SPL,R30
0000b3 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000b4 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000b5 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000b6 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000b7 940c 00b9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 
                 	.DSEG
                 ;void main(void)
                 ; 0000 0034 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0035 // Declare your local variables here
                 ; 0000 0036 
                 ; 0000 0037 cont = 0;
0000b9 2444      	CLR  R4
0000ba 2455      	CLR  R5
                 ; 0000 0038 i = 0;
0000bb 2466      	CLR  R6
0000bc 2477      	CLR  R7
                 ; 0000 0039 j = 0;
0000bd 2488      	CLR  R8
0000be 2499      	CLR  R9
                 ; 0000 003A k = 0;
0000bf 24aa      	CLR  R10
0000c0 24bb      	CLR  R11
                 ; 0000 003B 
                 ; 0000 003C // Input/Output Ports initialization
                 ; 0000 003D // Port A initialization
                 ; 0000 003E // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 003F DDRA=0xFF;
0000c1 efef      	LDI  R30,LOW(255)
0000c2 bbea      	OUT  0x1A,R30
                 ; 0000 0040 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0041 
                 ; 0000 0042 
                 ; 0000 0043 // Port B initialization
                 ; 0000 0044 // Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0045 DDRB=(1<<DDB7) | (1<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000c3 ece0      	LDI  R30,LOW(192)
0000c4 bbe7      	OUT  0x17,R30
                 ; 0000 0046 // State: Bit7=0 Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0047 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000c5 e0e0      	LDI  R30,LOW(0)
0000c6 bbe8      	OUT  0x18,R30
                 ; 0000 0048 
                 ; 0000 0049 // Port C initialization
                 ; 0000 004A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004B DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000c7 bbe4      	OUT  0x14,R30
                 ; 0000 004C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000c8 bbe5      	OUT  0x15,R30
                 ; 0000 004E 
                 ; 0000 004F // Port D initialization
                 ; 0000 0050 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0051 DDRD=0XFF;
0000c9 efef      	LDI  R30,LOW(255)
0000ca bbe1      	OUT  0x11,R30
                 ; 0000 0052 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0053 
                 ; 0000 0054 
                 ; 0000 0055 // Timer/Counter 0 initialization
                 ; 0000 0056 // Clock source: System Clock
                 ; 0000 0057 // Clock value: Timer 0 Stopped
                 ; 0000 0058 // Mode: Normal top=0xFF
                 ; 0000 0059 // OC0 output: Disconnected
                 ; 0000 005A TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000cb e0e0      	LDI  R30,LOW(0)
0000cc bfe3      	OUT  0x33,R30
                 ; 0000 005B TCNT0=0x00;
0000cd bfe2      	OUT  0x32,R30
                 ; 0000 005C OCR0=0x00;
0000ce bfec      	OUT  0x3C,R30
                 ; 0000 005D 
                 ; 0000 005E // Timer/Counter 1 initialization
                 ; 0000 005F // Clock source: System Clock
                 ; 0000 0060 // Clock value: Timer1 Stopped
                 ; 0000 0061 // Mode: Normal top=0xFFFF
                 ; 0000 0062 // OC1A output: Disconnected
                 ; 0000 0063 // OC1B output: Disconnected
                 ; 0000 0064 // Noise Canceler: Off
                 ; 0000 0065 // Input Capture on Falling Edge
                 ; 0000 0066 // Timer1 Overflow Interrupt: Off
                 ; 0000 0067 // Input Capture Interrupt: Off
                 ; 0000 0068 // Compare A Match Interrupt: Off
                 ; 0000 0069 // Compare B Match Interrupt: Off
                 ; 0000 006A TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000cf bdef      	OUT  0x2F,R30
                 ; 0000 006B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000d0 bdee      	OUT  0x2E,R30
                 ; 0000 006C TCNT1H=0x00;
0000d1 bded      	OUT  0x2D,R30
                 ; 0000 006D TCNT1L=0x00;
0000d2 bdec      	OUT  0x2C,R30
                 ; 0000 006E ICR1H=0x00;
0000d3 bde7      	OUT  0x27,R30
                 ; 0000 006F ICR1L=0x00;
0000d4 bde6      	OUT  0x26,R30
                 ; 0000 0070 OCR1AH=0x00;
0000d5 bdeb      	OUT  0x2B,R30
                 ; 0000 0071 OCR1AL=0x00;
0000d6 bdea      	OUT  0x2A,R30
                 ; 0000 0072 OCR1BH=0x00;
0000d7 bde9      	OUT  0x29,R30
                 ; 0000 0073 OCR1BL=0x00;
0000d8 bde8      	OUT  0x28,R30
                 ; 0000 0074 
                 ; 0000 0075 // Timer/Counter 2 initialization
                 ; 0000 0076 // Clock source: System Clock
                 ; 0000 0077 // Clock value: Timer2 Stopped
                 ; 0000 0078 // Mode: Normal top=0xFF
                 ; 0000 0079 // OC2 output: Disconnected
                 ; 0000 007A ASSR=0<<AS2;
0000d9 bde2      	OUT  0x22,R30
                 ; 0000 007B TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000da bde5      	OUT  0x25,R30
                 ; 0000 007C TCNT2=0x00;
0000db bde4      	OUT  0x24,R30
                 ; 0000 007D OCR2=0x00;
0000dc bde3      	OUT  0x23,R30
                 ; 0000 007E 
                 ; 0000 007F // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0080 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000dd bfe9      	OUT  0x39,R30
                 ; 0000 0081 
                 ; 0000 0082 // External Interrupt(s) initialization
                 ; 0000 0083 // INT0: Off
                 ; 0000 0084 // INT1: Off
                 ; 0000 0085 // INT2: Off
                 ; 0000 0086 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000de bfe5      	OUT  0x35,R30
                 ; 0000 0087 MCUCSR=(0<<ISC2);
0000df bfe4      	OUT  0x34,R30
                 ; 0000 0088 
                 ; 0000 0089 // USART initialization
                 ; 0000 008A // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 008B // USART Receiver: On
                 ; 0000 008C // USART Transmitter: On
                 ; 0000 008D // USART Mode: Asynchronous
                 ; 0000 008E // USART Baud Rate: 9600
                 ; 0000 008F UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000e0 b9eb      	OUT  0xB,R30
                 ; 0000 0090 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000e1 e1e8      	LDI  R30,LOW(24)
0000e2 b9ea      	OUT  0xA,R30
                 ; 0000 0091 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000e3 e8e6      	LDI  R30,LOW(134)
0000e4 bde0      	OUT  0x20,R30
                 ; 0000 0092 UBRRH=0x00;
0000e5 e0e0      	LDI  R30,LOW(0)
0000e6 bde0      	OUT  0x20,R30
                 ; 0000 0093 UBRRL=0x5F;
0000e7 e5ef      	LDI  R30,LOW(95)
0000e8 b9e9      	OUT  0x9,R30
                 ; 0000 0094 
                 ; 0000 0095 // Analog Comparator initialization
                 ; 0000 0096 // Analog Comparator: Off
                 ; 0000 0097 // The Analog Comparator's positive input is
                 ; 0000 0098 // connected to the AIN0 pin
                 ; 0000 0099 // The Analog Comparator's negative input is
                 ; 0000 009A // connected to the AIN1 pin
                 ; 0000 009B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000e9 e8e0      	LDI  R30,LOW(128)
0000ea b9e8      	OUT  0x8,R30
                 ; 0000 009C SFIOR=(0<<ACME);
0000eb e0e0      	LDI  R30,LOW(0)
0000ec bfe0      	OUT  0x30,R30
                 ; 0000 009D 
                 ; 0000 009E // ADC initialization
                 ; 0000 009F // ADC disabled
                 ; 0000 00A0 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000ed b9e6      	OUT  0x6,R30
                 ; 0000 00A1 
                 ; 0000 00A2 // SPI initialization
                 ; 0000 00A3 // SPI disabled
                 ; 0000 00A4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000ee b9ed      	OUT  0xD,R30
                 ; 0000 00A5 
                 ; 0000 00A6 // TWI initialization
                 ; 0000 00A7 // TWI disabled
                 ; 0000 00A8 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000ef bfe6      	OUT  0x36,R30
                 ; 0000 00A9 
                 ; 0000 00AA // Alphanumeric LCD initialization
                 ; 0000 00AB // Connections are specified in the
                 ; 0000 00AC // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00AD // RS: PORTC Bit 0
                 ; 0000 00AE // RD: PORTC Bit 1
                 ; 0000 00AF // EN: PORTC Bit 2
                 ; 0000 00B0 // D4: PORTC Bit 4
                 ; 0000 00B1 // D5: PORTC Bit 5
                 ; 0000 00B2 // D6: PORTC Bit 6
                 ; 0000 00B3 // D7: PORTC Bit 7
                 ; 0000 00B4 // Characters/line: 16
                 ; 0000 00B5 lcd_init(16);
0000f0 e1a0      	LDI  R26,LOW(16)
0000f1 d2af      	RCALL _lcd_init
                 ; 0000 00B6 
                 ; 0000 00B7 while (1)
                 _0x5:
                 ; 0000 00B8 {
                 ; 0000 00B9 if (PINB.0)
0000f2 9bb0      	SBIS 0x16,0
0000f3 c003      	RJMP _0x8
                 ; 0000 00BA {
                 ; 0000 00BB cont = cont + 1;
0000f4 01f2      	MOVW R30,R4
0000f5 9631      	ADIW R30,1
0000f6 d2ef      	RCALL SUBOPT_0x0
                 ; 0000 00BC printf("Numero de pessoas no interior: = %d.\r\n",cont);
                 ; 0000 00BD 
                 ; 0000 00BE };
                 _0x8:
                 ; 0000 00BF 
                 ; 0000 00C0 delay_ms(200);
0000f7 eca8      	LDI  R26,LOW(200)
0000f8 e0b0      	LDI  R27,0
0000f9 d374      	RCALL _delay_ms
                 ; 0000 00C1 
                 ; 0000 00C2 if (PINB.1)
0000fa 9bb1      	SBIS 0x16,1
0000fb c00e      	RJMP _0x9
                 ; 0000 00C3 {
                 ; 0000 00C4 if(cont == 0)
0000fc 2c04      	MOV  R0,R4
0000fd 2805      	OR   R0,R5
0000fe f441      	BRNE _0xA
                 ; 0000 00C5 {
                 ; 0000 00C6 printf("Ambiente vazio \r\n");
                +
0000ff eaed     +LDI R30 , LOW ( 2 * _0x0 + ( 39 ) )
000100 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 39 ) )
                 	__POINTW1FN _0x0,39
000101 93fa      	ST   -Y,R31
000102 93ea      	ST   -Y,R30
000103 e080      	LDI  R24,0
000104 d21c      	RCALL _printf
000105 9622      	ADIW R28,2
                 ; 0000 00C7 }
                 ; 0000 00C8 
                 ; 0000 00C9 else
000106 c003      	RJMP _0xB
                 _0xA:
                 ; 0000 00CA {
                 ; 0000 00CB cont = cont - 1;
000107 01f2      	MOVW R30,R4
000108 9731      	SBIW R30,1
000109 d2dc      	RCALL SUBOPT_0x0
                 ; 0000 00CC printf("Numero de pessoas no interior: = %d.\r\n",cont);
                 ; 0000 00CD }
                 _0xB:
                 ; 0000 00CE 
                 ; 0000 00CF 
                 ; 0000 00D0 };
                 _0x9:
                 ; 0000 00D1 delay_ms(200);
00010a eca8      	LDI  R26,LOW(200)
00010b e0b0      	LDI  R27,0
00010c d361      	RCALL _delay_ms
                 ; 0000 00D2 
                 ; 0000 00D3 if(cont <= 4)
00010d e0e4      	LDI  R30,LOW(4)
00010e e0f0      	LDI  R31,HIGH(4)
00010f 15e4      	CP   R30,R4
000110 05f5      	CPC  R31,R5
000111 f034      	BRLT _0xC
                 ; 0000 00D4 {
                 ; 0000 00D5 PORTB.6=0;
000112 98c6      	CBI  0x18,6
                 ; 0000 00D6 PORTB.7=1;
000113 9ac7      	SBI  0x18,7
                 ; 0000 00D7 PORTA = 0;
000114 e0e0      	LDI  R30,LOW(0)
000115 bbeb      	OUT  0x1B,R30
                 ; 0000 00D8 PORTD = 0;
000116 bbe2      	OUT  0x12,R30
                 ; 0000 00D9 
                 ; 0000 00DA }
                 ; 0000 00DB 
                 ; 0000 00DC else
000117 c039      	RJMP _0x11
                 _0xC:
                 ; 0000 00DD {
                 ; 0000 00DE PORTB.6=~PORTB.6;
000118 9bc6      	SBIS 0x18,6
000119 c002      	RJMP _0x12
00011a 98c6      	CBI  0x18,6
00011b c001      	RJMP _0x13
                 _0x12:
00011c 9ac6      	SBI  0x18,6
                 _0x13:
                 ; 0000 00DF PORTB.7=0;
00011d 98c7      	CBI  0x18,7
                 ; 0000 00E0 
                 ; 0000 00E1 for (k=0;k<120;k++) //2*50=100
00011e 24aa      	CLR  R10
00011f 24bb      	CLR  R11
                 _0x17:
000120 e7e8      	LDI  R30,LOW(120)
000121 e0f0      	LDI  R31,HIGH(120)
000122 16ae      	CP   R10,R30
000123 06bf      	CPC  R11,R31
000124 f504      	BRGE _0x18
                 ; 0000 00E2 {
                 ; 0000 00E3 PORTA=a_p[i];
000125 eaa2      	LDI  R26,LOW(_a_p)
000126 e0b1      	LDI  R27,HIGH(_a_p)
000127 0da6      	ADD  R26,R6
000128 1db7      	ADC  R27,R7
000129 91ec      	LD   R30,X
00012a bbeb      	OUT  0x1B,R30
                 ; 0000 00E4 PORTD=~a_n[j][i];
00012b 01f4      	MOVW R30,R8
00012c d328      	RCALL __LSLW3
00012d 55e6      	SUBI R30,LOW(-_a_n)
00012e 4ffe      	SBCI R31,HIGH(-_a_n)
00012f 0de6      	ADD  R30,R6
000130 1df7      	ADC  R31,R7
000131 81e0      	LD   R30,Z
000132 95e0      	COM  R30
000133 bbe2      	OUT  0x12,R30
                 ; 0000 00E5 delay_ms(2);
000134 e0a2      	LDI  R26,LOW(2)
000135 e0b0      	LDI  R27,0
000136 d337      	RCALL _delay_ms
                 ; 0000 00E6 i+=1;
000137 01f3      	MOVW R30,R6
000138 9631      	ADIW R30,1
000139 013f      	MOVW R6,R30
                 ; 0000 00E7 if(i>8)
00013a e0e8      	LDI  R30,LOW(8)
00013b e0f0      	LDI  R31,HIGH(8)
00013c 15e6      	CP   R30,R6
00013d 05f7      	CPC  R31,R7
00013e f414      	BRGE _0x19
                 ; 0000 00E8 {
                 ; 0000 00E9 i=0;
00013f 2466      	CLR  R6
000140 2477      	CLR  R7
                 ; 0000 00EA }
                 ; 0000 00EB }
                 _0x19:
000141 01f5      	MOVW R30,R10
000142 9631      	ADIW R30,1
000143 015f      	MOVW R10,R30
000144 cfdb      	RJMP _0x17
                 _0x18:
                 ; 0000 00EC j+=1;
000145 01f4      	MOVW R30,R8
000146 9631      	ADIW R30,1
000147 014f      	MOVW R8,R30
                 ; 0000 00ED if(j>2)
000148 e0e2      	LDI  R30,LOW(2)
000149 e0f0      	LDI  R31,HIGH(2)
00014a 15e8      	CP   R30,R8
00014b 05f9      	CPC  R31,R9
00014c f424      	BRGE _0x1A
                 ; 0000 00EE {
                 ; 0000 00EF j=0;
00014d 2488      	CLR  R8
00014e 2499      	CLR  R9
                 ; 0000 00F0 i=0;
00014f 2466      	CLR  R6
000150 2477      	CLR  R7
                 ; 0000 00F1 }
                 ; 0000 00F2 };
                 _0x1A:
                 _0x11:
                 ; 0000 00F3 delay_ms(200);
000151 eca8      	LDI  R26,LOW(200)
000152 e0b0      	LDI  R27,0
000153 d31a      	RCALL _delay_ms
                 ; 0000 00F4 
                 ; 0000 00F5 while(cont >= 6)
000154 d29d      	RCALL SUBOPT_0x1
000155 f044      	BRLT _0x1D
                 ; 0000 00F6 {
                 ; 0000 00F7 PORTB.6=~PORTB.6;
000156 9bc6      	SBIS 0x18,6
000157 c002      	RJMP _0x1E
000158 98c6      	CBI  0x18,6
000159 c001      	RJMP _0x1F
                 _0x1E:
00015a 9ac6      	SBI  0x18,6
                 _0x1F:
                 ; 0000 00F8 delay_ms(10);
00015b e0aa      	LDI  R26,LOW(10)
00015c e0b0      	LDI  R27,0
00015d d310      	RCALL _delay_ms
                 ; 0000 00F9 break;
                 ; 0000 00FA }
                 _0x1D:
                 ; 0000 00FB 
                 ; 0000 00FC if (cont == 0 )
00015e 2c04      	MOV  R0,R4
00015f 2805      	OR   R0,R5
000160 f421      	BRNE _0x20
                 ; 0000 00FD {
                 ; 0000 00FE sprintf(aviso,"AMBIENTE VAZIO");
000161 d295      	RCALL SUBOPT_0x2
                +
000162 ebef     +LDI R30 , LOW ( 2 * _0x0 + ( 57 ) )
000163 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 57 ) )
                 	__POINTW1FN _0x0,57
000164 d297      	RCALL SUBOPT_0x3
                 ; 0000 00FF lcd_clear();
                 ; 0000 0100 lcd_puts(aviso);
                 ; 0000 0101 };
                 _0x20:
                 ; 0000 0102 
                 ; 0000 0103 if (cont == 2)
000165 e0e2      	LDI  R30,LOW(2)
000166 e0f0      	LDI  R31,HIGH(2)
000167 15e4      	CP   R30,R4
000168 05f5      	CPC  R31,R5
000169 f421      	BRNE _0x21
                 ; 0000 0104 {
                 ; 0000 0105 sprintf(aviso,"MANTER DISTANCIA");
00016a d28c      	RCALL SUBOPT_0x2
                +
00016b ecee     +LDI R30 , LOW ( 2 * _0x0 + ( 72 ) )
00016c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 72 ) )
                 	__POINTW1FN _0x0,72
00016d d28e      	RCALL SUBOPT_0x3
                 ; 0000 0106 lcd_clear();
                 ; 0000 0107 lcd_puts(aviso);
                 ; 0000 0108 };
                 _0x21:
                 ; 0000 0109 
                 ; 0000 010A if (cont == 5)
00016e e0e5      	LDI  R30,LOW(5)
00016f e0f0      	LDI  R31,HIGH(5)
000170 15e4      	CP   R30,R4
000171 05f5      	CPC  R31,R5
000172 f421      	BRNE _0x22
                 ; 0000 010B {
                 ; 0000 010C sprintf(aviso,"CAPACIDADE MAX");
000173 d283      	RCALL SUBOPT_0x2
                +
000174 edef     +LDI R30 , LOW ( 2 * _0x0 + ( 89 ) )
000175 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 89 ) )
                 	__POINTW1FN _0x0,89
000176 d285      	RCALL SUBOPT_0x3
                 ; 0000 010D lcd_clear();
                 ; 0000 010E lcd_puts(aviso);
                 ; 0000 010F };
                 _0x22:
                 ; 0000 0110 
                 ; 0000 0111 if (cont >= 6)
000177 d27a      	RCALL SUBOPT_0x1
000178 f024      	BRLT _0x23
                 ; 0000 0112 {
                 ; 0000 0113 sprintf(aviso,"FAVOR RETIRAR-SE");
000179 d27d      	RCALL SUBOPT_0x2
                +
00017a eeee     +LDI R30 , LOW ( 2 * _0x0 + ( 104 ) )
00017b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 104 ) )
                 	__POINTW1FN _0x0,104
00017c d27f      	RCALL SUBOPT_0x3
                 ; 0000 0114 lcd_clear();
                 ; 0000 0115 lcd_puts(aviso);
                 ; 0000 0116 };
                 _0x23:
                 ; 0000 0117 
                 ; 0000 0118 lcd_gotoxy(7,1);
00017d e0e7      	LDI  R30,LOW(7)
00017e 93ea      	ST   -Y,R30
00017f e0a1      	LDI  R26,LOW(1)
000180 d1df      	RCALL _lcd_gotoxy
                 ; 0000 0119 sprintf(lotacao,"%d", cont);
000181 e6e0      	LDI  R30,LOW(_lotacao)
000182 e0f1      	LDI  R31,HIGH(_lotacao)
000183 93fa      	ST   -Y,R31
000184 93ea      	ST   -Y,R30
                +
000185 efef     +LDI R30 , LOW ( 2 * _0x0 + ( 121 ) )
000186 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 121 ) )
                 	__POINTW1FN _0x0,121
000187 93fa      	ST   -Y,R31
000188 93ea      	ST   -Y,R30
000189 01f2      	MOVW R30,R4
00018a d2d1      	RCALL __CWD1
00018b d2dd      	RCALL __PUTPARD1
00018c e084      	LDI  R24,4
00018d d168      	RCALL _sprintf
00018e 9628      	ADIW R28,8
                 ; 0000 011A lcd_puts(lotacao);
00018f e6a0      	LDI  R26,LOW(_lotacao)
000190 e0b1      	LDI  R27,HIGH(_lotacao)
000191 d200      	RCALL _lcd_puts
                 ; 0000 011B }
000192 cf5f      	RJMP _0x5
                 ; 0000 011C 
                 ; 0000 011D 
                 ; 0000 011E }
                 _0x24:
000193 cfff      	RJMP _0x24
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
000194 93aa      	ST   -Y,R26
                 putchar0:
000195 9b5d           sbis usr,udre
000196 cffe           rjmp putchar0
000197 81e8           ld   r30,y
000198 b9ec           out  udr,r30
000199 940c 035e 	JMP  _0x2080002
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
00019b d2a1      	RCALL __SAVELOCR4
00019c 018d      	MOVW R16,R26
00019d 813c      	LDD  R19,Y+4
00019e 2fa3      	MOV  R26,R19
00019f dff4      	RCALL _putchar
0001a0 01d8      	MOVW R26,R16
0001a1 d263      	RCALL SUBOPT_0x4
0001a2 d2a1      	RCALL __LOADLOCR4
0001a3 9625      	ADIW R28,5
0001a4 9508      	RET
                 ; .FEND
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0001a5 d295      	RCALL __SAVELOCR6
0001a6 019d      	MOVW R18,R26
0001a7 815e      	LDD  R21,Y+6
0001a8 9612      	ADIW R26,2
0001a9 d2b7      	RCALL __GETW1P
0001aa 9730      	SBIW R30,0
0001ab f0e1      	BREQ _0x2000010
0001ac 01d9      	MOVW R26,R18
0001ad 9614      	ADIW R26,4
0001ae d2b2      	RCALL __GETW1P
0001af 018f      	MOVW R16,R30
0001b0 9730      	SBIW R30,0
0001b1 f059      	BREQ _0x2000012
                +
0001b2 3002     +CPI R16 , LOW ( 2 )
0001b3 e0e0     +LDI R30 , HIGH ( 2 )
0001b4 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001b5 f060      	BRLO _0x2000013
0001b6 01f8      	MOVW R30,R16
0001b7 9731      	SBIW R30,1
0001b8 018f      	MOVW R16,R30
                +
0001b9 01d9     +MOVW R26 , R18
0001ba 9614     +ADIW R26 , 4
0001bb 93ed     +ST X + , R30
0001bc 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2000012:
0001bd 01d9      	MOVW R26,R18
0001be 9612      	ADIW R26,2
0001bf d245      	RCALL SUBOPT_0x4
0001c0 9731      	SBIW R30,1
0001c1 8350      	ST   Z,R21
                 _0x2000013:
0001c2 01d9      	MOVW R26,R18
0001c3 d29d      	RCALL __GETW1P
0001c4 23ff      	TST  R31
0001c5 f00a      	BRMI _0x2000014
0001c6 d23e      	RCALL SUBOPT_0x4
                 _0x2000014:
0001c7 c005      	RJMP _0x2000015
                 _0x2000010:
0001c8 01d9      	MOVW R26,R18
0001c9 efef      	LDI  R30,LOW(65535)
0001ca efff      	LDI  R31,HIGH(65535)
0001cb 93ed      	ST   X+,R30
0001cc 93fc      	ST   X,R31
                 _0x2000015:
0001cd d274      	RCALL __LOADLOCR6
0001ce 9627      	ADIW R28,7
0001cf 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0001d0 93ba      	ST   -Y,R27
0001d1 93aa      	ST   -Y,R26
0001d2 9726      	SBIW R28,6
0001d3 d267      	RCALL __SAVELOCR6
0001d4 e010      	LDI  R17,0
0001d5 85ac      	LDD  R26,Y+12
0001d6 85bd      	LDD  R27,Y+12+1
0001d7 e0e0      	LDI  R30,LOW(0)
0001d8 e0f0      	LDI  R31,HIGH(0)
0001d9 93ed      	ST   X+,R30
0001da 93fc      	ST   X,R31
                 _0x2000016:
0001db 89ea      	LDD  R30,Y+18
0001dc 89fb      	LDD  R31,Y+18+1
0001dd 9631      	ADIW R30,1
0001de 8bea      	STD  Y+18,R30
0001df 8bfb      	STD  Y+18+1,R31
0001e0 9731      	SBIW R30,1
0001e1 91e4      	LPM  R30,Z
0001e2 2f2e      	MOV  R18,R30
0001e3 30e0      	CPI  R30,0
0001e4 f409      	BRNE PC+2
0001e5 c109      	RJMP _0x2000018
0001e6 2fe1      	MOV  R30,R17
0001e7 30e0      	CPI  R30,0
0001e8 f431      	BRNE _0x200001C
0001e9 3225      	CPI  R18,37
0001ea f411      	BRNE _0x200001D
0001eb e011      	LDI  R17,LOW(1)
0001ec c001      	RJMP _0x200001E
                 _0x200001D:
0001ed d21d      	RCALL SUBOPT_0x5
                 _0x200001E:
0001ee c0ff      	RJMP _0x200001B
                 _0x200001C:
0001ef 30e1      	CPI  R30,LOW(0x1)
0001f0 f4a1      	BRNE _0x200001F
0001f1 3225      	CPI  R18,37
0001f2 f411      	BRNE _0x2000020
0001f3 d217      	RCALL SUBOPT_0x5
0001f4 c0f8      	RJMP _0x20000CC
                 _0x2000020:
0001f5 e012      	LDI  R17,LOW(2)
0001f6 e040      	LDI  R20,LOW(0)
0001f7 e000      	LDI  R16,LOW(0)
0001f8 322d      	CPI  R18,45
0001f9 f411      	BRNE _0x2000021
0001fa e001      	LDI  R16,LOW(1)
0001fb c0f2      	RJMP _0x200001B
                 _0x2000021:
0001fc 322b      	CPI  R18,43
0001fd f411      	BRNE _0x2000022
0001fe e24b      	LDI  R20,LOW(43)
0001ff c0ee      	RJMP _0x200001B
                 _0x2000022:
000200 3220      	CPI  R18,32
000201 f411      	BRNE _0x2000023
000202 e240      	LDI  R20,LOW(32)
000203 c0ea      	RJMP _0x200001B
                 _0x2000023:
000204 c002      	RJMP _0x2000024
                 _0x200001F:
000205 30e2      	CPI  R30,LOW(0x2)
000206 f439      	BRNE _0x2000025
                 _0x2000024:
000207 e050      	LDI  R21,LOW(0)
000208 e013      	LDI  R17,LOW(3)
000209 3320      	CPI  R18,48
00020a f411      	BRNE _0x2000026
00020b 6800      	ORI  R16,LOW(128)
00020c c0e1      	RJMP _0x200001B
                 _0x2000026:
00020d c003      	RJMP _0x2000027
                 _0x2000025:
00020e 30e3      	CPI  R30,LOW(0x3)
00020f f009      	BREQ PC+2
000210 c0dd      	RJMP _0x200001B
                 _0x2000027:
000211 3320      	CPI  R18,48
000212 f010      	BRLO _0x200002A
000213 332a      	CPI  R18,58
000214 f008      	BRLO _0x200002B
                 _0x200002A:
000215 c007      	RJMP _0x2000029
                 _0x200002B:
000216 e0aa      	LDI  R26,LOW(10)
000217 9f5a      	MUL  R21,R26
000218 2d50      	MOV  R21,R0
000219 2fe2      	MOV  R30,R18
00021a 53e0      	SUBI R30,LOW(48)
00021b 0f5e      	ADD  R21,R30
00021c c0d1      	RJMP _0x200001B
                 _0x2000029:
00021d 2fe2      	MOV  R30,R18
00021e 36e3      	CPI  R30,LOW(0x63)
00021f f439      	BRNE _0x200002F
000220 d1f1      	RCALL SUBOPT_0x6
000221 89e8      	LDD  R30,Y+16
000222 89f9      	LDD  R31,Y+16+1
000223 81a4      	LDD  R26,Z+4
000224 93aa      	ST   -Y,R26
000225 d1f2      	RCALL SUBOPT_0x7
000226 c0c6      	RJMP _0x2000030
                 _0x200002F:
000227 37e3      	CPI  R30,LOW(0x73)
000228 f429      	BRNE _0x2000032
000229 d1e8      	RCALL SUBOPT_0x6
00022a d1f3      	RCALL SUBOPT_0x8
00022b d1a1      	RCALL _strlen
00022c 2f1e      	MOV  R17,R30
00022d c007      	RJMP _0x2000033
                 _0x2000032:
00022e 37e0      	CPI  R30,LOW(0x70)
00022f f449      	BRNE _0x2000035
000230 d1e1      	RCALL SUBOPT_0x6
000231 d1ec      	RCALL SUBOPT_0x8
000232 d1a6      	RCALL _strlenf
000233 2f1e      	MOV  R17,R30
000234 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000235 6002      	ORI  R16,LOW(2)
000236 770f      	ANDI R16,LOW(127)
000237 e030      	LDI  R19,LOW(0)
000238 c038      	RJMP _0x2000036
                 _0x2000035:
000239 36e4      	CPI  R30,LOW(0x64)
00023a f011      	BREQ _0x2000039
00023b 36e9      	CPI  R30,LOW(0x69)
00023c f411      	BRNE _0x200003A
                 _0x2000039:
00023d 6004      	ORI  R16,LOW(4)
00023e c002      	RJMP _0x200003B
                 _0x200003A:
00023f 37e5      	CPI  R30,LOW(0x75)
000240 f431      	BRNE _0x200003C
                 _0x200003B:
000241 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000242 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000243 83ee      	STD  Y+6,R30
000244 83ff      	STD  Y+6+1,R31
000245 e015      	LDI  R17,LOW(5)
000246 c00c      	RJMP _0x200003D
                 _0x200003C:
000247 35e8      	CPI  R30,LOW(0x58)
000248 f411      	BRNE _0x200003F
000249 6008      	ORI  R16,LOW(8)
00024a c003      	RJMP _0x2000040
                 _0x200003F:
00024b 37e8      	CPI  R30,LOW(0x78)
00024c f009      	BREQ PC+2
00024d c09f      	RJMP _0x2000071
                 _0x2000040:
00024e e5ee      	LDI  R30,LOW(_tbl16_G100*2)
00024f e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000250 83ee      	STD  Y+6,R30
000251 83ff      	STD  Y+6+1,R31
000252 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000253 ff02      	SBRS R16,2
000254 c015      	RJMP _0x2000042
000255 d1bc      	RCALL SUBOPT_0x6
000256 89a8      	LDD  R26,Y+16
000257 89b9      	LDD  R27,Y+16+1
000258 9614      	ADIW R26,4
000259 91ed      	LD   R30,X+
00025a 91fd      	LD   R31,X+
00025b 87ea      	STD  Y+10,R30
00025c 87fb      	STD  Y+10+1,R31
00025d 85ab      	LDD  R26,Y+11
00025e 23aa      	TST  R26
00025f f422      	BRPL _0x2000043
000260 d1f0      	RCALL __ANEGW1
000261 87ea      	STD  Y+10,R30
000262 87fb      	STD  Y+10+1,R31
000263 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000264 3040      	CPI  R20,0
000265 f011      	BREQ _0x2000044
000266 5f1f      	SUBI R17,-LOW(1)
000267 c001      	RJMP _0x2000045
                 _0x2000044:
000268 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000269 c007      	RJMP _0x2000046
                 _0x2000042:
00026a d1a7      	RCALL SUBOPT_0x6
00026b 89a8      	LDD  R26,Y+16
00026c 89b9      	LDD  R27,Y+16+1
00026d 9614      	ADIW R26,4
00026e d1f2      	RCALL __GETW1P
00026f 87ea      	STD  Y+10,R30
000270 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
000271 fd00      	SBRC R16,0
000272 c010      	RJMP _0x2000047
                 _0x2000048:
000273 1715      	CP   R17,R21
000274 f470      	BRSH _0x200004A
000275 ff07      	SBRS R16,7
000276 c008      	RJMP _0x200004B
000277 ff02      	SBRS R16,2
000278 c004      	RJMP _0x200004C
000279 7f0b      	ANDI R16,LOW(251)
00027a 2f24      	MOV  R18,R20
00027b 5011      	SUBI R17,LOW(1)
00027c c001      	RJMP _0x200004D
                 _0x200004C:
00027d e320      	LDI  R18,LOW(48)
                 _0x200004D:
00027e c001      	RJMP _0x200004E
                 _0x200004B:
00027f e220      	LDI  R18,LOW(32)
                 _0x200004E:
000280 d18a      	RCALL SUBOPT_0x5
000281 5051      	SUBI R21,LOW(1)
000282 cff0      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000283 2f31      	MOV  R19,R17
000284 ff01      	SBRS R16,1
000285 c016      	RJMP _0x200004F
                 _0x2000050:
000286 3030      	CPI  R19,0
000287 f099      	BREQ _0x2000052
000288 ff03      	SBRS R16,3
000289 c006      	RJMP _0x2000053
00028a 81ee      	LDD  R30,Y+6
00028b 81ff      	LDD  R31,Y+6+1
00028c 9125      	LPM  R18,Z+
00028d 83ee      	STD  Y+6,R30
00028e 83ff      	STD  Y+6+1,R31
00028f c005      	RJMP _0x2000054
                 _0x2000053:
000290 81ae      	LDD  R26,Y+6
000291 81bf      	LDD  R27,Y+6+1
000292 912d      	LD   R18,X+
000293 83ae      	STD  Y+6,R26
000294 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000295 d175      	RCALL SUBOPT_0x5
000296 3050      	CPI  R21,0
000297 f009      	BREQ _0x2000055
000298 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000299 5031      	SUBI R19,LOW(1)
00029a cfeb      	RJMP _0x2000050
                 _0x2000052:
00029b c048      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00029c e320      	LDI  R18,LOW(48)
00029d 81ee      	LDD  R30,Y+6
00029e 81ff      	LDD  R31,Y+6+1
00029f d1c5      	RCALL __GETW1PF
0002a0 87e8      	STD  Y+8,R30
0002a1 87f9      	STD  Y+8+1,R31
0002a2 81ee      	LDD  R30,Y+6
0002a3 81ff      	LDD  R31,Y+6+1
0002a4 9632      	ADIW R30,2
0002a5 83ee      	STD  Y+6,R30
0002a6 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0002a7 85e8      	LDD  R30,Y+8
0002a8 85f9      	LDD  R31,Y+8+1
0002a9 85aa      	LDD  R26,Y+10
0002aa 85bb      	LDD  R27,Y+10+1
0002ab 17ae      	CP   R26,R30
0002ac 07bf      	CPC  R27,R31
0002ad f050      	BRLO _0x200005C
0002ae 5f2f      	SUBI R18,-LOW(1)
0002af 85a8      	LDD  R26,Y+8
0002b0 85b9      	LDD  R27,Y+8+1
0002b1 85ea      	LDD  R30,Y+10
0002b2 85fb      	LDD  R31,Y+10+1
0002b3 1bea      	SUB  R30,R26
0002b4 0bfb      	SBC  R31,R27
0002b5 87ea      	STD  Y+10,R30
0002b6 87fb      	STD  Y+10+1,R31
0002b7 cfef      	RJMP _0x200005A
                 _0x200005C:
0002b8 332a      	CPI  R18,58
0002b9 f028      	BRLO _0x200005D
0002ba ff03      	SBRS R16,3
0002bb c002      	RJMP _0x200005E
0002bc 5f29      	SUBI R18,-LOW(7)
0002bd c001      	RJMP _0x200005F
                 _0x200005E:
0002be 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0002bf fd04      	SBRC R16,4
0002c0 c019      	RJMP _0x2000061
0002c1 3321      	CPI  R18,49
0002c2 f420      	BRSH _0x2000063
0002c3 85a8      	LDD  R26,Y+8
0002c4 85b9      	LDD  R27,Y+8+1
0002c5 9711      	SBIW R26,1
0002c6 f409      	BRNE _0x2000062
                 _0x2000063:
0002c7 c009      	RJMP _0x20000CD
                 _0x2000062:
0002c8 1753      	CP   R21,R19
0002c9 f010      	BRLO _0x2000067
0002ca ff00      	SBRS R16,0
0002cb c001      	RJMP _0x2000068
                 _0x2000067:
0002cc c011      	RJMP _0x2000066
                 _0x2000068:
0002cd e220      	LDI  R18,LOW(32)
0002ce ff07      	SBRS R16,7
0002cf c00a      	RJMP _0x2000069
0002d0 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0002d1 6100      	ORI  R16,LOW(16)
0002d2 ff02      	SBRS R16,2
0002d3 c006      	RJMP _0x200006A
0002d4 7f0b      	ANDI R16,LOW(251)
0002d5 934a      	ST   -Y,R20
0002d6 d141      	RCALL SUBOPT_0x7
0002d7 3050      	CPI  R21,0
0002d8 f009      	BREQ _0x200006B
0002d9 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0002da d130      	RCALL SUBOPT_0x5
0002db 3050      	CPI  R21,0
0002dc f009      	BREQ _0x200006C
0002dd 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0002de 5031      	SUBI R19,LOW(1)
0002df 85a8      	LDD  R26,Y+8
0002e0 85b9      	LDD  R27,Y+8+1
0002e1 9712      	SBIW R26,2
0002e2 f008      	BRLO _0x2000059
0002e3 cfb8      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002e4 ff00      	SBRS R16,0
0002e5 c007      	RJMP _0x200006D
                 _0x200006E:
0002e6 3050      	CPI  R21,0
0002e7 f029      	BREQ _0x2000070
0002e8 5051      	SUBI R21,LOW(1)
0002e9 e2e0      	LDI  R30,LOW(32)
0002ea 93ea      	ST   -Y,R30
0002eb d12c      	RCALL SUBOPT_0x7
0002ec cff9      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0002ed e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002ee ceec      	RJMP _0x2000016
                 _0x2000018:
0002ef 85ac      	LDD  R26,Y+12
0002f0 85bd      	LDD  R27,Y+12+1
0002f1 91ed      	LD   R30,X+
0002f2 91fd      	LD   R31,X+
0002f3 d14e      	RCALL __LOADLOCR6
0002f4 9664      	ADIW R28,20
0002f5 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002f6 92ff      	PUSH R15
0002f7 2ef8      	MOV  R15,R24
0002f8 9726      	SBIW R28,6
0002f9 d141      	RCALL __SAVELOCR6
0002fa 01fe      	MOVW R30,R28
0002fb d14d      	RCALL __ADDW1R15
                +
0002fc 8546     +LDD R20 , Z + 14
0002fd 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
0002fe 2e04      	MOV  R0,R20
0002ff 2a05      	OR   R0,R21
000300 f419      	BRNE _0x2000072
000301 efef      	LDI  R30,LOW(65535)
000302 efff      	LDI  R31,HIGH(65535)
000303 c019      	RJMP _0x2080003
                 _0x2000072:
000304 01de      	MOVW R26,R28
000305 9618      	ADIW R26,8
000306 d146      	RCALL __ADDW2R15
000307 018d      	MOVW R16,R26
                +
000308 8748     +STD Y + 8 , R20
000309 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
00030a e0e0      	LDI  R30,LOW(0)
00030b 87ea      	STD  Y+10,R30
00030c 87eb      	STD  Y+10+1,R30
00030d 01de      	MOVW R26,R28
00030e 961c      	ADIW R26,12
00030f d118      	RCALL SUBOPT_0x9
000310 eae5      	LDI  R30,LOW(_put_buff_G100)
000311 e0f1      	LDI  R31,HIGH(_put_buff_G100)
000312 93fa      	ST   -Y,R31
000313 93ea      	ST   -Y,R30
000314 01de      	MOVW R26,R28
000315 961c      	ADIW R26,12
000316 deb9      	RCALL __print_G100
000317 019f      	MOVW R18,R30
000318 85a8      	LDD  R26,Y+8
000319 85b9      	LDD  R27,Y+8+1
00031a e0e0      	LDI  R30,LOW(0)
00031b 93ec      	ST   X,R30
00031c 01f9      	MOVW R30,R18
                 _0x2080003:
00031d d124      	RCALL __LOADLOCR6
00031e 962c      	ADIW R28,12
00031f 90ff      	POP  R15
000320 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000321 92ff      	PUSH R15
000322 2ef8      	MOV  R15,R24
000323 9726      	SBIW R28,6
000324 931a      	ST   -Y,R17
000325 930a      	ST   -Y,R16
000326 01de      	MOVW R26,R28
000327 9614      	ADIW R26,4
000328 d124      	RCALL __ADDW2R15
000329 018d      	MOVW R16,R26
00032a e0e0      	LDI  R30,LOW(0)
00032b 83ec      	STD  Y+4,R30
00032c 83ed      	STD  Y+4+1,R30
00032d 83ee      	STD  Y+6,R30
00032e 83ef      	STD  Y+6+1,R30
00032f 01de      	MOVW R26,R28
000330 9618      	ADIW R26,8
000331 d0f6      	RCALL SUBOPT_0x9
000332 e9eb      	LDI  R30,LOW(_put_usart_G100)
000333 e0f1      	LDI  R31,HIGH(_put_usart_G100)
000334 93fa      	ST   -Y,R31
000335 93ea      	ST   -Y,R30
000336 01de      	MOVW R26,R28
000337 9618      	ADIW R26,8
000338 de97      	RCALL __print_G100
000339 8119      	LDD  R17,Y+1
00033a 8108      	LDD  R16,Y+0
00033b 9628      	ADIW R28,8
00033c 90ff      	POP  R15
00033d 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
00033e 931a      	ST   -Y,R17
00033f 2f1a      	MOV  R17,R26
000340 b3e5      	IN   R30,0x15
000341 70ef      	ANDI R30,LOW(0xF)
000342 2fae      	MOV  R26,R30
000343 2fe1      	MOV  R30,R17
000344 7fe0      	ANDI R30,LOW(0xF0)
000345 2bea      	OR   R30,R26
000346 bbe5      	OUT  0x15,R30
                +
000347 e189     +LDI R24 , LOW ( 25 )
                +__DELAY_USB_LOOP :
000348 958a     +DEC R24
000349 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 25
00034a 9aaa      	SBI  0x15,2
                +
00034b e189     +LDI R24 , LOW ( 25 )
                +__DELAY_USB_LOOP :
00034c 958a     +DEC R24
00034d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 25
00034e 98aa      	CBI  0x15,2
                +
00034f e189     +LDI R24 , LOW ( 25 )
                +__DELAY_USB_LOOP :
000350 958a     +DEC R24
000351 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 25
000352 c078      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000353 93aa      	ST   -Y,R26
000354 81a8      	LD   R26,Y
000355 dfe8      	RCALL __lcd_write_nibble_G101
000356 81e8          ld    r30,y
000357 95e2          swap  r30
000358 83e8          st    y,r30
000359 81a8      	LD   R26,Y
00035a dfe3      	RCALL __lcd_write_nibble_G101
                +
00035b ef86     +LDI R24 , LOW ( 246 )
                +__DELAY_USB_LOOP :
00035c 958a     +DEC R24
00035d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 246
                 _0x2080002:
00035e 9621      	ADIW R28,1
00035f 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000360 931a      	ST   -Y,R17
000361 930a      	ST   -Y,R16
000362 2f1a      	MOV  R17,R26
000363 810a      	LDD  R16,Y+2
000364 2fe1      	MOV  R30,R17
000365 e0f0      	LDI  R31,0
000366 53ee      	SUBI R30,LOW(-__base_y_G101)
000367 4ffe      	SBCI R31,HIGH(-__base_y_G101)
000368 81e0      	LD   R30,Z
000369 0fe0      	ADD  R30,R16
00036a 2fae      	MOV  R26,R30
00036b dfe7      	RCALL __lcd_write_data
00036c 2ed0      	MOV  R13,R16
00036d 2ec1      	MOV  R12,R17
00036e 8119      	LDD  R17,Y+1
00036f 8108      	LDD  R16,Y+0
000370 9623      	ADIW R28,3
000371 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000372 e0a2      	LDI  R26,LOW(2)
000373 d0bc      	RCALL SUBOPT_0xA
000374 e0ac      	LDI  R26,LOW(12)
000375 dfdd      	RCALL __lcd_write_data
000376 e0a1      	LDI  R26,LOW(1)
000377 d0b8      	RCALL SUBOPT_0xA
000378 e0e0      	LDI  R30,LOW(0)
000379 2ece      	MOV  R12,R30
00037a 2ede      	MOV  R13,R30
00037b 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00037c 931a      	ST   -Y,R17
00037d 2f1a      	MOV  R17,R26
00037e 301a      	CPI  R17,10
00037f f021      	BREQ _0x2020005
000380 91e0 01c6 	LDS  R30,__lcd_maxx
000382 16de      	CP   R13,R30
000383 f040      	BRLO _0x2020004
                 _0x2020005:
000384 e0e0      	LDI  R30,LOW(0)
000385 93ea      	ST   -Y,R30
000386 94c3      	INC  R12
000387 2dac      	MOV  R26,R12
000388 dfd7      	RCALL _lcd_gotoxy
000389 301a      	CPI  R17,10
00038a f409      	BRNE _0x2020007
00038b c03f      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
00038c 94d3      	INC  R13
00038d 9aa8      	SBI  0x15,0
00038e 2fa1      	MOV  R26,R17
00038f dfc3      	RCALL __lcd_write_data
000390 98a8      	CBI  0x15,0
000391 c039      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000392 d0aa      	RCALL __SAVELOCR4
000393 019d      	MOVW R18,R26
                 _0x2020008:
000394 01d9      	MOVW R26,R18
                +
000395 5f2f     +SUBI R18 , LOW ( - 1 )
000396 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000397 91ec      	LD   R30,X
000398 2f1e      	MOV  R17,R30
000399 30e0      	CPI  R30,0
00039a f019      	BREQ _0x202000A
00039b 2fa1      	MOV  R26,R17
00039c dfdf      	RCALL _lcd_putchar
00039d cff6      	RJMP _0x2020008
                 _0x202000A:
00039e d0a5      	RCALL __LOADLOCR4
00039f 9624      	ADIW R28,4
0003a0 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0003a1 931a      	ST   -Y,R17
0003a2 2f1a      	MOV  R17,R26
0003a3 b3e4      	IN   R30,0x14
0003a4 6fe0      	ORI  R30,LOW(0xF0)
0003a5 bbe4      	OUT  0x14,R30
0003a6 9aa2      	SBI  0x14,2
0003a7 9aa0      	SBI  0x14,0
0003a8 9aa1      	SBI  0x14,1
0003a9 98aa      	CBI  0x15,2
0003aa 98a8      	CBI  0x15,0
0003ab 98a9      	CBI  0x15,1
0003ac 9310 01c6 	STS  __lcd_maxx,R17
0003ae 2fe1      	MOV  R30,R17
0003af 58e0      	SUBI R30,-LOW(128)
                +
0003b0 93e0 01c4+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0003b2 2fe1      	MOV  R30,R17
0003b3 54e0      	SUBI R30,-LOW(192)
                +
0003b4 93e0 01c5+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0003b6 e1a4      	LDI  R26,LOW(20)
0003b7 e0b0      	LDI  R27,0
0003b8 d0b5      	RCALL _delay_ms
0003b9 d07a      	RCALL SUBOPT_0xB
0003ba d079      	RCALL SUBOPT_0xB
0003bb d078      	RCALL SUBOPT_0xB
0003bc e2a0      	LDI  R26,LOW(32)
0003bd df80      	RCALL __lcd_write_nibble_G101
                +
0003be e781     +LDI R24 , LOW ( 369 )
0003bf e091     +LDI R25 , HIGH ( 369 )
                +__DELAY_USW_LOOP :
0003c0 9701     +SBIW R24 , 1
0003c1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 369
0003c2 e2a8      	LDI  R26,LOW(40)
0003c3 df8f      	RCALL __lcd_write_data
0003c4 e0a4      	LDI  R26,LOW(4)
0003c5 df8d      	RCALL __lcd_write_data
0003c6 e8a5      	LDI  R26,LOW(133)
0003c7 df8b      	RCALL __lcd_write_data
0003c8 e0a6      	LDI  R26,LOW(6)
0003c9 df89      	RCALL __lcd_write_data
0003ca dfa7      	RCALL _lcd_clear
                 _0x2080001:
0003cb 9119      	LD   R17,Y+
0003cc 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003cd 93ba      	ST   -Y,R27
0003ce 93aa      	ST   -Y,R26
0003cf 91a9          ld   r26,y+
0003d0 91b9          ld   r27,y+
0003d1 27ee          clr  r30
0003d2 27ff          clr  r31
                 strlen0:
0003d3 916d          ld   r22,x+
0003d4 2366          tst  r22
0003d5 f011          breq strlen1
0003d6 9631          adiw r30,1
0003d7 cffb          rjmp strlen0
                 strlen1:
0003d8 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003d9 93ba      	ST   -Y,R27
0003da 93aa      	ST   -Y,R26
0003db 27aa          clr  r26
0003dc 27bb          clr  r27
0003dd 91e9          ld   r30,y+
0003de 91f9          ld   r31,y+
                 strlenf0:
0003df 9005      	lpm  r0,z+
0003e0 2000          tst  r0
0003e1 f011          breq strlenf1
0003e2 9611          adiw r26,1
0003e3 cffb          rjmp strlenf0
                 strlenf1:
0003e4 01fd          movw r30,r26
0003e5 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _lotacao:
000160           	.BYTE 0x21
                 _aviso:
000181           	.BYTE 0x21
                 _a_p:
0001a2           	.BYTE 0x8
                 _a_n:
0001aa           	.BYTE 0x18
                 __base_y_G101:
0001c2           	.BYTE 0x4
                 __lcd_maxx:
0001c6           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
0003e6 012f      	MOVW R4,R30
                +
0003e7 e8e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0003e8 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0003e9 93fa      	ST   -Y,R31
0003ea 93ea      	ST   -Y,R30
0003eb 01f2      	MOVW R30,R4
0003ec d06f      	RCALL __CWD1
0003ed d07b      	RCALL __PUTPARD1
0003ee e084      	LDI  R24,4
0003ef df31      	RCALL _printf
0003f0 9626      	ADIW R28,6
0003f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0003f2 e0e6      	LDI  R30,LOW(6)
0003f3 e0f0      	LDI  R31,HIGH(6)
0003f4 164e      	CP   R4,R30
0003f5 065f      	CPC  R5,R31
0003f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
0003f7 e8e1      	LDI  R30,LOW(_aviso)
0003f8 e0f1      	LDI  R31,HIGH(_aviso)
0003f9 93fa      	ST   -Y,R31
0003fa 93ea      	ST   -Y,R30
0003fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x3:
0003fc 93fa      	ST   -Y,R31
0003fd 93ea      	ST   -Y,R30
0003fe e080      	LDI  R24,0
0003ff def6      	RCALL _sprintf
000400 9624      	ADIW R28,4
000401 df70      	RCALL _lcd_clear
000402 e8a1      	LDI  R26,LOW(_aviso)
000403 e0b1      	LDI  R27,HIGH(_aviso)
000404 cf8d      	RJMP _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
000405 91ed      	LD   R30,X+
000406 91fd      	LD   R31,X+
000407 9631      	ADIW R30,1
000408 93fe      	ST   -X,R31
000409 93ee      	ST   -X,R30
00040a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x5:
00040b 932a      	ST   -Y,R18
00040c 85ad      	LDD  R26,Y+13
00040d 85be      	LDD  R27,Y+13+1
00040e 85ef      	LDD  R30,Y+15
00040f 89f8      	LDD  R31,Y+15+1
000410 9509      	ICALL
000411 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x6:
000412 89e8      	LDD  R30,Y+16
000413 89f9      	LDD  R31,Y+16+1
000414 9734      	SBIW R30,4
000415 8be8      	STD  Y+16,R30
000416 8bf9      	STD  Y+16+1,R31
000417 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
000418 85ad      	LDD  R26,Y+13
000419 85be      	LDD  R27,Y+13+1
00041a 85ef      	LDD  R30,Y+15
00041b 89f8      	LDD  R31,Y+15+1
00041c 9509      	ICALL
00041d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
00041e 89a8      	LDD  R26,Y+16
00041f 89b9      	LDD  R27,Y+16+1
000420 9614      	ADIW R26,4
000421 91ed      	LD   R30,X+
000422 91fd      	LD   R31,X+
000423 83ee      	STD  Y+6,R30
000424 83ff      	STD  Y+6+1,R31
000425 81ae      	LDD  R26,Y+6
000426 81bf      	LDD  R27,Y+6+1
000427 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
000428 d024      	RCALL __ADDW2R15
000429 91ed      	LD   R30,X+
00042a 91fd      	LD   R31,X+
00042b 93fa      	ST   -Y,R31
00042c 93ea      	ST   -Y,R30
00042d 931a      	ST   -Y,R17
00042e 930a      	ST   -Y,R16
00042f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000430 df22      	RCALL __lcd_write_data
000431 e0a3      	LDI  R26,LOW(3)
000432 e0b0      	LDI  R27,0
000433 c03a      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xB:
000434 e3a0      	LDI  R26,LOW(48)
000435 df08      	RCALL __lcd_write_nibble_G101
                +
000436 e781     +LDI R24 , LOW ( 369 )
000437 e091     +LDI R25 , HIGH ( 369 )
                +__DELAY_USW_LOOP :
000438 9701     +SBIW R24 , 1
000439 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 369
00043a 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
00043b 935a      	ST   -Y,R21
                 __SAVELOCR5:
00043c 934a      	ST   -Y,R20
                 __SAVELOCR4:
00043d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00043e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00043f 931a      	ST   -Y,R17
000440 930a      	ST   -Y,R16
000441 9508      	RET
                 
                 __LOADLOCR6:
000442 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000443 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000444 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000445 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000446 8119      	LDD  R17,Y+1
000447 8108      	LD   R16,Y
000448 9508      	RET
                 
                 __ADDW1R15:
000449 2400      	CLR  R0
00044a 0def      	ADD  R30,R15
00044b 1df0      	ADC  R31,R0
00044c 9508      	RET
                 
                 __ADDW2R15:
00044d 2400      	CLR  R0
00044e 0daf      	ADD  R26,R15
00044f 1db0      	ADC  R27,R0
000450 9508      	RET
                 
                 __ANEGW1:
000451 95f1      	NEG  R31
000452 95e1      	NEG  R30
000453 40f0      	SBCI R31,0
000454 9508      	RET
                 
                 __LSLW3:
000455 0fee      	LSL  R30
000456 1fff      	ROL  R31
                 __LSLW2:
000457 0fee      	LSL  R30
000458 1fff      	ROL  R31
000459 0fee      	LSL  R30
00045a 1fff      	ROL  R31
00045b 9508      	RET
                 
                 __CWD1:
00045c 2f6f      	MOV  R22,R31
00045d 0f66      	ADD  R22,R22
00045e 0b66      	SBC  R22,R22
00045f 2f76      	MOV  R23,R22
000460 9508      	RET
                 
                 __GETW1P:
000461 91ed      	LD   R30,X+
000462 91fc      	LD   R31,X
000463 9711      	SBIW R26,1
000464 9508      	RET
                 
                 __GETW1PF:
000465 9005      	LPM  R0,Z+
000466 91f4      	LPM  R31,Z
000467 2de0      	MOV  R30,R0
000468 9508      	RET
                 
                 __PUTPARD1:
000469 937a      	ST   -Y,R23
00046a 936a      	ST   -Y,R22
00046b 93fa      	ST   -Y,R31
00046c 93ea      	ST   -Y,R30
00046d 9508      	RET
                 
                 _delay_ms:
00046e 9610      	adiw r26,0
00046f f039      	breq __delay_ms1
                 __delay_ms0:
000470 95a8      	wdr
                +
000471 e686     +LDI R24 , LOW ( 0xE66 )
000472 e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
000473 9701     +SBIW R24 , 1
000474 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
000475 9711      	sbiw r26,1
000476 f7c9      	brne __delay_ms0
                 __delay_ms1:
000477 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  19 r1 :   1 r2 :   0 r3 :   0 r4 :  12 r5 :   7 r6 :   8 r7 :   6 
r8 :   6 r9 :   3 r10:   5 r11:   3 r12:   4 r13:   4 r14:   0 r15:   8 
r16:  42 r17:  41 r18:  38 r19:  11 r20:  12 r21:  22 r22:  11 r23:   2 
r24:  27 r25:   5 r26: 107 r27:  36 r28:  23 r29:   1 r30: 261 r31:  92 
x  :  28 y  : 157 z  :  18 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   7 
adiw  :  35 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   3 brmi  :   1 brne  :  34 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  24 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   1 
cp    :  11 cpc   :   9 cpi   :  33 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  23 ld    :  28 ldd   :  64 ldi   : 145 
lds   :   1 lpm   :  14 lsl   :   3 lsr   :   0 mov   :  36 movw  :  40 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   4 
ori   :   7 out   :  49 pop   :   2 push  :   2 rcall :  96 ret   :  33 
reti  :   0 rjmp  :  70 rol   :   3 ror   :   0 sbc   :   2 sbci  :   4 
sbi   :   8 sbic  :   0 sbis  :   5 sbiw  :  20 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  65 std   :  34 sts   :   3 sub   :   1 subi  :  18 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 58 out of 116 (50.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008f0   2092    196   2288   16384  14.0%
[.dseg] 0x000060 0x0001c7      0    103    103    1024  10.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
