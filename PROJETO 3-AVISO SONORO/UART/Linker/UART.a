;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void main(void)
; 0000 0026 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0027 // Declare your local variables here
; 0000 0028 cont = 0;
;PCODE: $0000000E VOL: 0
; 0000 0029 
; 0000 002A // Input/Output Ports initialization
; 0000 002B // Port B initialization
; 0000 002C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 002D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 002E PORTB=0x00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002F DDRB=0x02;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0030 
; 0000 0031 // Port C initialization
; 0000 0032 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0033 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0034 PORTC=0x00;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0035 DDRC=0x02;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0036 
; 0000 0037 // Port D initialization
; 0000 0038 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0039 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 003A PORTD=0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 003B DDRD=0x00;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003C 
; 0000 003D // Timer/Counter 0 initialization
; 0000 003E // Clock source: System Clock
; 0000 003F // Clock value: Timer 0 Stopped
; 0000 0040 TCCR0=0x00;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0041 TCNT0=0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0042 
; 0000 0043 // Timer/Counter 1 initialization
; 0000 0044 // Clock source: System Clock
; 0000 0045 // Clock value: Timer1 Stopped
; 0000 0046 // Mode: Normal top=0xFFFF
; 0000 0047 // OC1A output: Discon.
; 0000 0048 // OC1B output: Discon.
; 0000 0049 // Noise Canceler: Off
; 0000 004A // Input Capture on Falling Edge
; 0000 004B // Timer1 Overflow Interrupt: Off
; 0000 004C // Input Capture Interrupt: Off
; 0000 004D // Compare A Match Interrupt: Off
; 0000 004E // Compare B Match Interrupt: Off
; 0000 004F TCCR1A=0x00;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0050 TCCR1B=0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0051 TCNT1H=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0052 TCNT1L=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0053 ICR1H=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0054 ICR1L=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0055 OCR1AH=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0056 OCR1AL=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0057 OCR1BH=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0058 OCR1BL=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0059 
; 0000 005A // Timer/Counter 2 initialization
; 0000 005B // Clock source: System Clock
; 0000 005C // Clock value: Timer2 Stopped
; 0000 005D // Mode: Normal top=0xFF
; 0000 005E // OC2 output: Disconnected
; 0000 005F ASSR=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0060 TCCR2=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0061 TCNT2=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0062 OCR2=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0063 
; 0000 0064 // External Interrupt(s) initialization
; 0000 0065 // INT0: Off
; 0000 0066 // INT1: Off
; 0000 0067 MCUCR=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0068 
; 0000 0069 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 006A TIMSK=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 006B 
; 0000 006C // USART initialization
; 0000 006D // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 006E // USART Receiver: Off
; 0000 006F // USART Transmitter: On
; 0000 0070 // USART Mode: Asynchronous
; 0000 0071 // USART Baud Rate: 19200
; 0000 0072 UCSRA=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0073 UCSRB=0x08;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0074 UCSRC=0x86;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0075 UBRRH=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0076 UBRRL=0x2F;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0077 
; 0000 0078 // Analog Comparator initialization
; 0000 0079 // Analog Comparator: Off
; 0000 007A // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 007B ACSR=0x80;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 007C SFIOR=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 007D 
; 0000 007E // ADC initialization
; 0000 007F // ADC disabled
; 0000 0080 ADCSRA=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0081 
; 0000 0082 // SPI initialization
; 0000 0083 // SPI disabled
; 0000 0084 SPCR=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0085 
; 0000 0086 // TWI initialization
; 0000 0087 // TWI disabled
; 0000 0088 TWCR=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0089 
; 0000 008A while (1)
;PCODE: $00000053 VOL: 0
; 0000 008B {
; 0000 008C // Place your code here
; 0000 008D if (PIND.1)
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 008E {
; 0000 008F cont = cont + 1;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0090 printf("Numero de pessoas no interior: = %d.\r\n",cont);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0091 
; 0000 0092 };
;PCODE: $00000064 VOL: 0
; 0000 0093 
; 0000 0094 delay_ms(500); // Aguarda 500 milisegundos
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0095 
; 0000 0096 if (PIND.2)
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0097 {
; 0000 0098 if(cont == 0)
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0099 {
; 0000 009A printf("Ambiente vazio \r\n");
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 009B }
; 0000 009C 
; 0000 009D else
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 009E {
; 0000 009F cont = cont - 1;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00A0 printf("Numero de pessoas no interior: = %d.\r\n",cont);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00A1 }
;PCODE: $00000082 VOL: 0
; 0000 00A2 
; 0000 00A3 
; 0000 00A4 };
;PCODE: $00000083 VOL: 0
; 0000 00A5 
; 0000 00A6 
; 0000 00A7 while(cont==5)
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00A8 {
; 0000 00A9 PORTC.1=~PORTC.1;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00AA delay_ms(500);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00AB 
; 0000 00AC break;
;PCODE: $00000094 VOL: 0
; 0000 00AD }
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00AE 
; 0000 00AF while(cont==6)
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00B0 {
; 0000 00B1 PORTC.1=~PORTC.1;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00B2 delay_ms(150);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00B3 
; 0000 00B4 
; 0000 00B5 break;
;PCODE: $000000A8 VOL: 0
; 0000 00B6 }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00B7 
; 0000 00B8 
; 0000 00B9 while(cont >= 7)
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00BA {
; 0000 00BB PORTC.1=1;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00BC delay_ms(10);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00BD 
; 0000 00BE 
; 0000 00BF break;
;PCODE: $000000B4 VOL: 0
; 0000 00C0 }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00C1 
; 0000 00C2 
; 0000 00C3 } //while
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00C4 }
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
